{"version":3,"sources":["webpack:///./node_modules/brace/mode/clojure.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","ClojureHighlightRules","builtinFunctions","keywords","buildinConstants","keywordMapper","this","createKeywordMapper","keyword","constant.language","support.function","$rules","start","token","regex","next","string","inherits","Range","MatchingParensOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","$behaviour","$defaultBehaviour","lineCommentStart","minorIndentFunctions","$toIndent","str","split","map","ch","exec","join","$calculateIndent","tab","isParen","baseIndent","delta","i","substring","iBefore","fn","indexOf","undefined","getNextLineIndent","state","$id"],"mappings":"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","file":"js/chunk-2d213768.b7833bed.js","sourcesContent":["ace.define(\"ace/mode/clojure_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n\n\nvar ClojureHighlightRules = function() {\n\n    var builtinFunctions = (\n        '* *1 *2 *3 *agent* *allow-unresolved-vars* *assert* *clojure-version* ' +\n        '*command-line-args* *compile-files* *compile-path* *e *err* *file* ' +\n        '*flush-on-newline* *in* *macro-meta* *math-context* *ns* *out* ' +\n        '*print-dup* *print-length* *print-level* *print-meta* *print-readably* ' +\n        '*read-eval* *source-path* *use-context-classloader* ' +\n        '*warn-on-reflection* + - -> ->> .. / < <= = ' +\n        '== > &gt; >= &gt;= accessor aclone ' +\n        'add-classpath add-watch agent agent-errors aget alength alias all-ns ' +\n        'alter alter-meta! alter-var-root amap ancestors and apply areduce ' +\n        'array-map aset aset-boolean aset-byte aset-char aset-double aset-float ' +\n        'aset-int aset-long aset-short assert assoc assoc! assoc-in associative? ' +\n        'atom await await-for await1 bases bean bigdec bigint binding bit-and ' +\n        'bit-and-not bit-clear bit-flip bit-not bit-or bit-set bit-shift-left ' +\n        'bit-shift-right bit-test bit-xor boolean boolean-array booleans ' +\n        'bound-fn bound-fn* butlast byte byte-array bytes cast char char-array ' +\n        'char-escape-string char-name-string char? chars chunk chunk-append ' +\n        'chunk-buffer chunk-cons chunk-first chunk-next chunk-rest chunked-seq? ' +\n        'class class? clear-agent-errors clojure-version coll? comment commute ' +\n        'comp comparator compare compare-and-set! compile complement concat cond ' +\n        'condp conj conj! cons constantly construct-proxy contains? count ' +\n        'counted? create-ns create-struct cycle dec decimal? declare definline ' +\n        'defmacro defmethod defmulti defn defn- defonce defstruct delay delay? ' +\n        'deliver deref derive descendants destructure disj disj! dissoc dissoc! ' +\n        'distinct distinct? doall doc dorun doseq dosync dotimes doto double ' +\n        'double-array doubles drop drop-last drop-while empty empty? ensure ' +\n        'enumeration-seq eval even? every? false? ffirst file-seq filter find ' +\n        'find-doc find-ns find-var first float float-array float? floats flush ' +\n        'fn fn? fnext for force format future future-call future-cancel ' +\n        'future-cancelled? future-done? future? gen-class gen-interface gensym ' +\n        'get get-in get-method get-proxy-class get-thread-bindings get-validator ' +\n        'hash hash-map hash-set identical? identity if-let if-not ifn? import ' +\n        'in-ns inc init-proxy instance? int int-array integer? interleave intern ' +\n        'interpose into into-array ints io! isa? iterate iterator-seq juxt key ' +\n        'keys keyword keyword? last lazy-cat lazy-seq let letfn line-seq list ' +\n        'list* list? load load-file load-reader load-string loaded-libs locking ' +\n        'long long-array longs loop macroexpand macroexpand-1 make-array ' +\n        'make-hierarchy map map? mapcat max max-key memfn memoize merge ' +\n        'merge-with meta method-sig methods min min-key mod name namespace neg? ' +\n        'newline next nfirst nil? nnext not not-any? not-empty not-every? not= ' +\n        'ns ns-aliases ns-imports ns-interns ns-map ns-name ns-publics ' +\n        'ns-refers ns-resolve ns-unalias ns-unmap nth nthnext num number? odd? ' +\n        'or parents partial partition pcalls peek persistent! pmap pop pop! ' +\n        'pop-thread-bindings pos? pr pr-str prefer-method prefers ' +\n        'primitives-classnames print print-ctor print-doc print-dup print-method ' +\n        'print-namespace-doc print-simple print-special-doc print-str printf ' +\n        'println println-str prn prn-str promise proxy proxy-call-with-super ' +\n        'proxy-mappings proxy-name proxy-super push-thread-bindings pvalues quot ' +\n        'rand rand-int range ratio? rational? rationalize re-find re-groups ' +\n        're-matcher re-matches re-pattern re-seq read read-line read-string ' +\n        'reduce ref ref-history-count ref-max-history ref-min-history ref-set ' +\n        'refer refer-clojure release-pending-sends rem remove remove-method ' +\n        'remove-ns remove-watch repeat repeatedly replace replicate acequire ' +\n        'reset! reset-meta! resolve rest resultset-seq reverse reversible? rseq ' +\n        'rsubseq second select-keys send send-off seq seq? seque sequence ' +\n        'sequential? set set-validator! set? short short-array shorts ' +\n        'shutdown-agents slurp some sort sort-by sorted-map sorted-map-by ' +\n        'sorted-set sorted-set-by sorted? special-form-anchor special-symbol? ' +\n        'split-at split-with str stream? string? struct struct-map subs subseq ' +\n        'subvec supers swap! symbol symbol? sync syntax-symbol-anchor take ' +\n        'take-last take-nth take-while test the-ns time to-array to-array-2d ' +\n        'trampoline transient tree-seq true? type unchecked-add unchecked-dec ' +\n        'unchecked-divide unchecked-inc unchecked-multiply unchecked-negate ' +\n        'unchecked-remainder unchecked-subtract underive unquote ' +\n        'unquote-splicing update-in update-proxy use val vals var-get var-set ' +\n        'var? vary-meta vec vector vector? when when-first when-let when-not ' +\n        'while with-bindings with-bindings* with-in-str with-loading-context ' +\n        'with-local-vars with-meta with-open with-out-str with-precision xml-seq ' +\n        'zero? zipmap'\n    );\n\n    var keywords = ('throw try var ' +\n        'def do fn if let loop monitor-enter monitor-exit new quote recur set!'\n    );\n\n    var buildinConstants = (\"true false nil\");\n\n    var keywordMapper = this.createKeywordMapper({\n        \"keyword\": keywords,\n        \"constant.language\": buildinConstants,\n        \"support.function\": builtinFunctions\n    }, \"identifier\", false, \" \");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \";.*$\"\n            }, {\n                token : \"keyword\", //parens\n                regex : \"[\\\\(|\\\\)]\"\n            }, {\n                token : \"keyword\", //lists\n                regex : \"[\\\\'\\\\(]\"\n            }, {\n                token : \"keyword\", //vectors\n                regex : \"[\\\\[|\\\\]]\"\n            }, {\n                token : \"keyword\", //sets and maps\n                regex : \"[\\\\{|\\\\}|\\\\#\\\\{|\\\\#\\\\}]\"\n            }, {\n                    token : \"keyword\", // ampersands\n                    regex : '[\\\\&]'\n            }, {\n                    token : \"keyword\", // metadata\n                    regex : '[\\\\#\\\\^\\\\{]'\n            }, {\n                    token : \"keyword\", // anonymous fn syntactic sugar\n                    regex : '[\\\\%]'\n            }, {\n                    token : \"keyword\", // deref reader macro\n                    regex : '[@]'\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language\",\n                regex : '[!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+||=|!=|<=|>=|<>|<|>|!|&&]'\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$\\\\-]*\\\\b\"\n            }, {\n                token : \"string\", // single line\n                regex : '\"',\n                next: \"string\"\n            }, {\n                token : \"constant\", // symbol\n                regex : /:[^()\\[\\]{}'\"\\^%`,;\\s]+/\n            }, {\n                token : \"string.regexp\", //Regular Expressions\n                regex : '/#\"(?:\\\\.|(?:\\\\\")|[^\"\"\\n])*\"/g'\n            }\n\n        ],\n        \"string\" : [\n            {\n                token : \"constant.language.escape\",\n                regex : \"\\\\\\\\.|\\\\\\\\$\"\n            }, {\n                token : \"string\",\n                regex : '[^\"\\\\\\\\]+'\n            }, {\n                token : \"string\",\n                regex : '\"',\n                next : \"start\"\n            }\n        ]\n    };\n};\n\noop.inherits(ClojureHighlightRules, TextHighlightRules);\n\nexports.ClojureHighlightRules = ClojureHighlightRules;\n});\n\nace.define(\"ace/mode/matching_parens_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingParensOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\)/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\))/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        var match = line.match(/^(\\s+)/);\n        if (match) {\n            return match[1];\n        }\n\n        return \"\";\n    };\n\n}).call(MatchingParensOutdent.prototype);\n\nexports.MatchingParensOutdent = MatchingParensOutdent;\n});\n\nace.define(\"ace/mode/clojure\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/clojure_highlight_rules\",\"ace/mode/matching_parens_outdent\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar ClojureHighlightRules = acequire(\"./clojure_highlight_rules\").ClojureHighlightRules;\nvar MatchingParensOutdent = acequire(\"./matching_parens_outdent\").MatchingParensOutdent;\n\nvar Mode = function() {\n    this.HighlightRules = ClojureHighlightRules;\n    this.$outdent = new MatchingParensOutdent();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \";\";\n    this.minorIndentFunctions = [\"defn\", \"defn-\", \"defmacro\", \"def\", \"deftest\", \"testing\"];\n\n    this.$toIndent = function(str) {\n        return str.split('').map(function(ch) {\n            if (/\\s/.exec(ch)) {\n                return ch;\n            } else {\n                return ' ';\n            }\n        }).join('');\n    };\n\n    this.$calculateIndent = function(line, tab) {\n        var baseIndent = this.$getIndent(line);\n        var delta = 0;\n        var isParen, ch;\n        for (var i = line.length - 1; i >= 0; i--) {\n            ch = line[i];\n            if (ch === '(') {\n                delta--;\n                isParen = true;\n            } else if (ch === '(' || ch === '[' || ch === '{') {\n                delta--;\n                isParen = false;\n            } else if (ch === ')' || ch === ']' || ch === '}') {\n                delta++;\n            }\n            if (delta < 0) {\n                break;\n            }\n        }\n        if (delta < 0 && isParen) {\n            i += 1;\n            var iBefore = i;\n            var fn = '';\n            while (true) {\n                ch = line[i];\n                if (ch === ' ' || ch === '\\t') {\n                    if(this.minorIndentFunctions.indexOf(fn) !== -1) {\n                        return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n                    } else {\n                        return this.$toIndent(line.substring(0, i + 1));\n                    }\n                } else if (ch === undefined) {\n                    return this.$toIndent(line.substring(0, iBefore - 1) + tab);\n                }\n                fn += line[i];\n                i++;\n            }\n        } else if(delta < 0 && !isParen) {\n            return this.$toIndent(line.substring(0, i+1));\n        } else if(delta > 0) {\n            baseIndent = baseIndent.substring(0, baseIndent.length - tab.length);\n            return baseIndent;\n        } else {\n            return baseIndent;\n        }\n    };\n\n    this.getNextLineIndent = function(state, line, tab) {\n        return this.$calculateIndent(line, tab);\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/clojure\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}