{"version":3,"sources":["webpack:///./node_modules/brace/mode/elm.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","ElmHighlightRules","keywordMapper","this","createKeywordMapper","keyword","escapeRe","smallRe","source","largeRe","idRe","$rules","start","token","regex","next","value","length","onMatch","currentState","stack","markdown","defaultToken","blockComment","push","docComment","string","stringGap","normalizeRules","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","nestable","$id"],"mappings":"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","file":"js/chunk-2d213707.be8ce709.js","sourcesContent":["ace.define(\"ace/mode/elm_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar ElmHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n       \"keyword\": \"as|case|class|data|default|deriving|do|else|export|foreign|\" +\n            \"hiding|jsevent|if|import|in|infix|infixl|infixr|instance|let|\" +\n            \"module|newtype|of|open|then|type|where|_|port|\\u03BB\"\n    }, \"identifier\");\n    \n    var escapeRe = /\\\\(\\d+|['\"\\\\&trnbvf])/;\n    \n    var smallRe = /[a-z_]/.source;\n    var largeRe = /[A-Z]/.source;\n    var idRe = /[a-z_A-Z0-9']/.source;\n\n    this.$rules = {\n        start: [{\n            token: \"string.start\",\n            regex: '\"',\n            next: \"string\"\n        }, {\n            token: \"string.character\",\n            regex: \"'(?:\" + escapeRe.source + \"|.)'?\"\n        }, {\n            regex: /0(?:[xX][0-9A-Fa-f]+|[oO][0-7]+)|\\d+(\\.\\d+)?([eE][-+]?\\d*)?/,\n            token: \"constant.numeric\"\n        }, {\n            token: \"comment\",\n            regex: \"--.*\"\n        }, {\n            token : \"keyword\",\n            regex : /\\.\\.|\\||:|=|\\\\|\"|->|<-|\\u2192/\n        }, {\n            token : \"keyword.operator\",\n            regex : /[-!#$%&*+.\\/<=>?@\\\\^|~:\\u03BB\\u2192]+/\n        }, {\n            token : \"operator.punctuation\",\n            regex : /[,;`]/\n        }, {\n            regex : largeRe + idRe + \"+\\\\.?\",\n            token : function(value) {\n                if (value[value.length - 1] == \".\")\n                    return \"entity.name.function\"; \n                return \"constant.language\"; \n            }\n        }, {\n            regex : \"^\" + smallRe  + idRe + \"+\",\n            token : function(value) {\n                return \"constant.language\"; \n            }\n        }, {\n            token : keywordMapper,\n            regex : \"[\\\\w\\\\xff-\\\\u218e\\\\u2455-\\\\uffff]+\\\\b\"\n        }, {\n            regex: \"{-#?\",\n            token: \"comment.start\",\n            onMatch: function(value, currentState, stack) {\n                this.next = value.length == 2 ? \"blockComment\" : \"docComment\";\n                return this.token;\n            }\n        }, {\n            token: \"variable.language\",\n            regex: /\\[markdown\\|/,\n            next: \"markdown\"\n        }, {\n            token: \"paren.lparen\",\n            regex: /[\\[({]/ \n        }, {\n            token: \"paren.rparen\",\n            regex: /[\\])}]/\n        } ],\n        markdown: [{\n            regex: /\\|\\]/,\n            next: \"start\"\n        }, {\n            defaultToken : \"string\"\n        }],\n        blockComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"blockComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\"\n        }, {\n            defaultToken: \"comment\"\n        }],\n        docComment: [{\n            regex: \"{-\",\n            token: \"comment.start\",\n            push: \"docComment\"\n        }, {\n            regex: \"-}\",\n            token: \"comment.end\",\n            next: \"pop\" \n        }, {\n            defaultToken: \"doc.comment\"\n        }],\n        string: [{\n            token: \"constant.language.escape\",\n            regex: escapeRe\n        }, {\n            token: \"text\",\n            regex: /\\\\(\\s|$)/,\n            next: \"stringGap\"\n        }, {\n            token: \"string.end\",\n            regex: '\"',\n            next: \"start\"\n        }, {\n            defaultToken: \"string\"\n        }],\n        stringGap: [{\n            token: \"text\",\n            regex: /\\\\/,\n            next: \"string\"\n        }, {\n            token: \"error\",\n            regex: \"\",\n            next: \"start\"\n        }]\n    };\n    \n    this.normalizeRules();\n};\n\noop.inherits(ElmHighlightRules, TextHighlightRules);\n\nexports.ElmHighlightRules = ElmHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/elm\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/elm_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar HighlightRules = acequire(\"./elm_highlight_rules\").ElmHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"{-\", end: \"-}\", nestable: true};\n    this.$id = \"ace/mode/elm\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}