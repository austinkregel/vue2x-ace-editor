{"version":3,"sources":["webpack:///./node_modules/brace/mode/snippets.js"],"names":["ace","define","acequire","exports","module","oop","BaseFoldMode","FoldMode","Range","inherits","this","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","TextHighlightRules","SnippetHighlightRules","builtins","$rules","start","token","regex","onMatch","value","state","stack","unshift","tokenName","splice","varDecl","regexp","charClass","format","SnippetGroupHighlightRules","embedRules","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$indentWithTabs","lineCommentStart","$id"],"mappings":"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","file":"js/chunk-2d225fa9.b94b4a72.js","sourcesContent":["ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/snippets\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/text_highlight_rules\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SnippetHighlightRules = function() {\n\n    var builtins = \"SELECTION|CURRENT_WORD|SELECTED_TEXT|CURRENT_LINE|LINE_INDEX|\" +\n        \"LINE_NUMBER|SOFT_TABS|TAB_SIZE|FILENAME|FILEPATH|FULLNAME\";\n\n    this.$rules = {\n        \"start\" : [\n            {token:\"constant.language.escape\", regex: /\\\\[\\$}`\\\\]/},\n            {token:\"keyword\", regex: \"\\\\$(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\$\\\\w+\"},\n            {onMatch: function(value, state, stack) {\n                if (stack[1])\n                    stack[1]++;\n                else\n                    stack.unshift(state, 1);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"\\\\${\", next: \"varDecl\"},\n            {onMatch: function(value, state, stack) {\n                if (!stack[1])\n                    return \"text\";\n                stack[1]--;\n                if (!stack[1])\n                    stack.splice(0,2);\n                return this.tokenName;\n            }, tokenName: \"markup.list\", regex: \"}\"},\n            {token: \"doc.comment\", regex:/^\\${2}-{5,}$/}\n        ],\n        \"varDecl\" : [\n            {regex: /\\d+\\b/, token: \"constant.numeric\"},\n            {token:\"keyword\", regex: \"(?:TM_)?(?:\" + builtins + \")\\\\b\"},\n            {token:\"variable\", regex: \"\\\\w+\"},\n            {regex: /:/, token: \"punctuation.operator\", next: \"start\"},\n            {regex: /\\//, token: \"string.regex\", next: \"regexp\"},\n            {regex: \"\", next: \"start\"}\n        ],\n        \"regexp\" : [\n            {regex: /\\\\./, token: \"escape\"},\n            {regex: /\\[/, token: \"regex.start\", next: \"charClass\"},\n            {regex: \"/\", token: \"string.regex\", next: \"format\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        charClass : [\n            {regex: \"\\\\.\", token: \"escape\"},\n            {regex: \"\\\\]\", token: \"regex.end\", next: \"regexp\"},\n            {\"token\": \"string.regex\", regex:\".\"}\n        ],\n        \"format\" : [\n            {regex: /\\\\[ulULE]/, token: \"keyword\"},\n            {regex: /\\$\\d+/, token: \"variable\"},\n            {regex: \"/[gim]*:?\", token: \"string.regex\", next: \"start\"},\n            {\"token\": \"string\", regex:\".\"}\n        ]\n    };\n};\noop.inherits(SnippetHighlightRules, TextHighlightRules);\n\nexports.SnippetHighlightRules = SnippetHighlightRules;\n\nvar SnippetGroupHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n\t\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t\t{token:\"invalid\", regex: /^ \\s*/},\n            {token:\"comment\", regex: /^#.*/},\n            {token:\"constant.language.escape\", regex: \"^regex \", next: \"regex\"},\n            {token:\"constant.language.escape\", regex: \"^(trigger|endTrigger|name|snippet|guard|endGuard|tabTrigger|key)\\\\b\"}\n        ],\n\t\t\"regex\" : [\n\t\t\t{token:\"text\", regex: \"\\\\.\"},\n\t\t\t{token:\"keyword\", regex: \"/\"},\n\t\t\t{token:\"empty\", regex: \"$\", next: \"start\"}\n\t\t]\n    };\n\tthis.embedRules(SnippetHighlightRules, \"sn-\", [\n\t\t{token: \"text\", regex: \"^\\\\t\", next: \"sn-start\"},\n\t\t{onMatch: function(value, state, stack) {\n\t\t\tstack.splice(stack.length);\n\t\t\treturn this.tokenName;\n\t\t}, tokenName: \"text\", regex: \"^(?!\\t)\", next: \"start\"}\n\t]);\n\t\n};\n\noop.inherits(SnippetGroupHighlightRules, TextHighlightRules);\n\nexports.SnippetGroupHighlightRules = SnippetGroupHighlightRules;\n\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = SnippetGroupHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$indentWithTabs = true;\n    this.lineCommentStart = \"#\";\n    this.$id = \"ace/mode/snippets\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n\n\n});\n"],"sourceRoot":""}