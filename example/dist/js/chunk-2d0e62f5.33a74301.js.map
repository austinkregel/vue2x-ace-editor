{"version":3,"sources":["webpack:///./node_modules/brace/mode/space.js"],"names":["ace","define","acequire","exports","module","oop","BaseFoldMode","FoldMode","Range","inherits","this","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","next","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextHighlightRules","SpaceHighlightRules","$rules","start","token","regex","key","value","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","$id"],"mappings":"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","file":"js/chunk-2d0e62f5.33a74301.js","sourcesContent":["ace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/space_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar SpaceHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"empty_line\",\n                regex : / */,\n                next : \"key\"\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"key\"\n            }\n        ],\n        \"key\" : [\n            {\n                token : \"variable\",\n                regex : /\\S+/\n            },\n            {\n                token : \"empty_line\",\n                regex : /$/,\n                next : \"start\"\n            },{\n                token : \"keyword.operator\",\n                regex : / /,\n                next  : \"value\"\n            }\n        ],\n        \"value\" : [\n            {\n                token : \"keyword.operator\",\n                regex : /$/,\n                next  : \"start\"\n            },\n            {\n                token : \"string\",\n                regex : /[^$]/\n            }\n        ]\n    };\n    \n};\n\noop.inherits(SpaceHighlightRules, TextHighlightRules);\n\nexports.SpaceHighlightRules = SpaceHighlightRules;\n});\n\nace.define(\"ace/mode/space\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/folding/coffee\",\"ace/mode/space_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\nvar SpaceHighlightRules = acequire(\"./space_highlight_rules\").SpaceHighlightRules;\nvar Mode = function() {\n    this.HighlightRules = SpaceHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n(function() {\n    \n    this.$id = \"ace/mode/space\";\n}).call(Mode.prototype);\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}