{"version":3,"sources":["webpack:///./node_modules/brace/mode/jsx.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","lang","JsxHighlightRules","keywords","arrayToMap","split","buildinConstants","reserved","identifierRe","value","hasOwnProperty","test","comment","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","$id"],"mappings":"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","file":"js/chunk-2d20efa8.b75f1164.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/jsx_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar JsxHighlightRules = function() {\n    var keywords = lang.arrayToMap(\n        (\"break|do|instanceof|typeof|case|else|new|var|catch|finally|return|void|continue|for|switch|default|while|function|this|\" +\n         \"if|throw|\" +\n         \"delete|in|try|\" +\n         \"class|extends|super|import|from|into|implements|interface|static|mixin|override|abstract|final|\" +\n         \"number|int|string|boolean|variant|\" +\n         \"log|assert\").split(\"|\")\n    );\n    \n    var buildinConstants = lang.arrayToMap(\n        (\"null|true|false|NaN|Infinity|__FILE__|__LINE__|undefined\").split(\"|\")\n    );\n    \n    var reserved = lang.arrayToMap(\n        (\"debugger|with|\" +\n         \"const|export|\" +\n         \"let|private|public|yield|protected|\" +\n         \"extern|native|as|operator|__fake__|__readonly__\").split(\"|\")\n    );\n    \n    var identifierRe = \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\";\n    \n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string.regexp\",\n                regex : \"[/](?:(?:\\\\[(?:\\\\\\\\]|[^\\\\]])+\\\\])|(?:\\\\\\\\/|[^\\\\]/]))*[/]\\\\w*\\\\s*(?=[).,;]|$)\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // single line\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : [\n                    \"storage.type\",\n                    \"text\",\n                    \"entity.name.function\"\n                ],\n                regex : \"(function)(\\\\s+)(\" + identifierRe + \")\"\n            }, {\n                token : function(value) {\n                    if (value == \"this\")\n                        return \"variable.language\";\n                    else if (value == \"function\")\n                        return \"storage.type\";\n                    else if (keywords.hasOwnProperty(value) || reserved.hasOwnProperty(value))\n                        return \"keyword\";\n                    else if (buildinConstants.hasOwnProperty(value))\n                        return \"constant.language\";\n                    else if (/^_?[A-Z][a-zA-Z0-9_]*$/.test(value))\n                        return \"language.support.class\";\n                    else\n                        return \"identifier\";\n                },\n                regex : identifierRe\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({<]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}>]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ]\n    };\n    \n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\noop.inherits(JsxHighlightRules, TextHighlightRules);\n\nexports.JsxHighlightRules = JsxHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/jsx\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/jsx_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar JsxHighlightRules = acequire(\"./jsx_highlight_rules\").JsxHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nfunction Mode() {\n    this.HighlightRules = JsxHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n}\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/jsx\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}