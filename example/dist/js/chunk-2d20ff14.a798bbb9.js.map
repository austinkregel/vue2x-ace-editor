{"version":3,"sources":["webpack:///./node_modules/brace/mode/ada.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","AdaHighlightRules","keywords","builtinConstants","builtinFunctions","keywordMapper","this","createKeywordMapper","support.function","keyword","constant.language","$rules","start","token","regex","inherits","TextMode","Mode","HighlightRules","$behaviour","$defaultBehaviour","lineCommentStart","$id","call","prototype"],"mappings":"iGAAAA,IAAAC,OAAA,qHAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAI,EAAAJ,EAAA,0BAAAI,mBAEAC,EAAA,WACA,IAAAC,EAAA,wcAMAC,EAAA,kBAIAC,EAAA,+CAIAC,EAAAC,KAAAC,oBAAA,CACAC,mBAAAJ,EACAK,QAAAP,EACAQ,oBAAAP,GACK,iBAELG,KAAAK,OAAA,CACAC,MAAA,EACAC,MAAA,UACAC,MAAA,SACS,CACTD,MAAA,SACAC,MAAA,SACS,CACTD,MAAA,SACAC,MAAA,SACS,CACTD,MAAA,mBACAC,MAAA,mDACS,CACTD,MAAAR,EACAS,MAAA,+BACS,CACTD,MAAA,mBACAC,MAAA,+DACS,CACTD,MAAA,eACAC,MAAA,SACS,CACTD,MAAA,eACAC,MAAA,SACS,CACTD,MAAA,OACAC,MAAA,WAKAf,EAAAgB,SAAAd,EAAAD,GAEAH,EAAAI,sBAGAP,IAAAC,OAAA,oHAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAoB,EAAApB,EAAA,UAAAqB,KACAhB,EAAAL,EAAA,yBAAAK,kBAEAgB,EAAA,WACAX,KAAAY,eAAAjB,EACAK,KAAAa,WAAAb,KAAAc,mBAEArB,EAAAgB,SAAAE,EAAAD,GAEA,WAEAV,KAAAe,iBAAA,KAEAf,KAAAgB,IAAA,gBACCC,KAAAN,EAAAO,WAED3B,EAAAoB","file":"js/chunk-2d20ff14.a798bbb9.js","sourcesContent":["ace.define(\"ace/mode/ada_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar AdaHighlightRules = function() {\nvar keywords = \"abort|else|new|return|abs|elsif|not|reverse|abstract|end|null|accept|entry|select|\" +\n\"access|exception|of|separate|aliased|exit|or|some|all|others|subtype|and|for|out|synchronized|\" +\n\"array|function|overriding|at|tagged|generic|package|task|begin|goto|pragma|terminate|\" +\n\"body|private|then|if|procedure|type|case|in|protected|constant|interface|until|\" +\n\"|is|raise|use|declare|range|delay|limited|record|when|delta|loop|rem|while|digits|renames|with|do|mod|requeue|xor\";\n\n    var builtinConstants = (\n        \"true|false|null\"\n    );\n\n    var builtinFunctions = (\n        \"count|min|max|avg|sum|rank|now|coalesce|main\"\n    );\n\n    var keywordMapper = this.createKeywordMapper({\n        \"support.function\": builtinFunctions,\n        \"keyword\": keywords,\n        \"constant.language\": builtinConstants\n    }, \"identifier\", true);\n\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment\",\n            regex : \"--.*$\"\n        }, {\n            token : \"string\",           // \" string\n            regex : '\".*?\"'\n        }, {\n            token : \"string\",           // ' string\n            regex : \"'.*?'\"\n        }, {\n            token : \"constant.numeric\", // float\n            regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n        }, {\n            token : keywordMapper,\n            regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n        }, {\n            token : \"keyword.operator\",\n            regex : \"\\\\+|\\\\-|\\\\/|\\\\/\\\\/|%|<@>|@>|<@|&|\\\\^|~|<|>|<=|=>|==|!=|<>|=\"\n        }, {\n            token : \"paren.lparen\",\n            regex : \"[\\\\(]\"\n        }, {\n            token : \"paren.rparen\",\n            regex : \"[\\\\)]\"\n        }, {\n            token : \"text\",\n            regex : \"\\\\s+\"\n        } ]\n    };\n};\n\noop.inherits(AdaHighlightRules, TextHighlightRules);\n\nexports.AdaHighlightRules = AdaHighlightRules;\n});\n\nace.define(\"ace/mode/ada\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/ada_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar AdaHighlightRules = acequire(\"./ada_highlight_rules\").AdaHighlightRules;\n\nvar Mode = function() {\n    this.HighlightRules = AdaHighlightRules;\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n\n    this.$id = \"ace/mode/ada\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n"],"sourceRoot":""}