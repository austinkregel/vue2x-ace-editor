{"version":3,"sources":["webpack:///./node_modules/brace/mode/yaml.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","YamlHighlightRules","this","$rules","start","token","regex","onMatch","val","state","stack","line","indent","exec","length","push","next","mlString","curIndent","splice","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","getFoldWidgetRange","session","foldStyle","range","indentationBlock","re","startLevel","search","startColumn","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","prev","prevIndent","nextIndent","foldWidgets","TextMode","Mode","HighlightRules","$outdent","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","getNextLineIndent","tab","$id"],"mappings":"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","file":"js/chunk-2d0b383f.fe8ab5f4.js","sourcesContent":["ace.define(\"ace/mode/yaml_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar YamlHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"#.*$\"\n            }, {\n                token : \"list.markup\",\n                regex : /^(?:-{3}|\\.{3})\\s*(?=#|$)/\n            },  {\n                token : \"list.markup\",\n                regex : /^\\s*[\\-?](?:$|\\s)/\n            }, {\n                token: \"constant\",\n                regex: \"!![\\\\w//]+\"\n            }, {\n                token: \"constant.language\",\n                regex: \"[&\\\\*][a-zA-Z0-9-_]+\"\n            }, {\n                token: [\"meta.tag\", \"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?=\\s|$))/\n            },{\n                token: [\"meta.tag\", \"keyword\"],\n                regex: /(\\w+?)(\\s*:(?=\\s|$))/\n            }, {\n                token : \"keyword.operator\",\n                regex : \"<<\\\\w*:\\\\w*\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"-\\\\s*(?=[{])\"\n            }, {\n                token : \"string\", // single line\n                regex : '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]'\n            }, {\n                token : \"string\", // multi line string start\n                regex : /[|>][-+\\d\\s]*$/,\n                onMatch: function(val, state, stack, line) {\n                    var indent = /^\\s*/.exec(line)[0];\n                    if (stack.length < 1) {\n                        stack.push(this.next);\n                    } else {\n                        stack[0] = \"mlString\";\n                    }\n\n                    if (stack.length < 2) {\n                        stack.push(indent.length);\n                    }\n                    else {\n                        stack[1] = indent.length;\n                    }\n                    return this.token;\n                },\n                next : \"mlString\"\n            }, {\n                token : \"string\", // single quoted string\n                regex : \"['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?[']\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /(\\b|[+\\-\\.])[\\d_]+(?:(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)(?=[^\\d-\\w]|$)/\n            }, {\n                token : \"constant.numeric\", // other number\n                regex : /[+\\-]?\\.inf\\b|NaN\\b|0x[\\dA-Fa-f_]+|0b[10_]+/\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"\\\\b(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : /[^\\s,:\\[\\]\\{\\}]+/\n            }\n        ],\n        \"mlString\" : [\n            {\n                token : \"indent\",\n                regex : /^\\s*$/\n            }, {\n                token : \"indent\",\n                regex : /^\\s*/,\n                onMatch: function(val, state, stack) {\n                    var curIndent = stack[1];\n\n                    if (curIndent >= val.length) {\n                        this.next = \"start\";\n                        stack.splice(0);\n                    }\n                    else {\n                        this.next = \"mlString\";\n                    }\n                    return this.token;\n                },\n                next : \"mlString\"\n            }, {\n                token : \"string\",\n                regex : '.+'\n            }\n        ]};\n    this.normalizeRules();\n\n};\n\noop.inherits(YamlHighlightRules, TextHighlightRules);\n\nexports.YamlHighlightRules = YamlHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/yaml\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/yaml_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar YamlHighlightRules = acequire(\"./yaml_highlight_rules\").YamlHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = YamlHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = [\"#\", \"//\"];\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n\n    this.$id = \"ace/mode/yaml\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n"],"sourceRoot":""}