{"version":3,"sources":["webpack:///./node_modules/brace/mode/pig.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PigHighlightRules","this","$rules","start","token","regex","push","next","defaultToken","caseInsensitive","todo","include","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","lineCommentStart","blockComment","$id"],"mappings":"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","file":"js/chunk-2d21d684.e4bc81c5.js","sourcesContent":["ace.define(\"ace/mode/pig_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PigHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            token: \"comment.block.pig\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"comment.block.pig\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.block.pig\"\n            }]\n        }, {\n            token: \"comment.line.double-dash.asciidoc\",\n            regex: /--.*$/\n        }, {\n            token: \"keyword.control.pig\",\n            regex: /\\b(?:ASSERT|LOAD|STORE|DUMP|FILTER|DISTINCT|FOREACH|GENERATE|STREAM|JOIN|COGROUP|GROUP|CROSS|ORDER|LIMIT|UNION|SPLIT|DESCRIBE|EXPLAIN|ILLUSTRATE|AS|BY|INTO|USING|LIMIT|PARALLEL|OUTER|INNER|DEFAULT|LEFT|SAMPLE|RANK|CUBE|ALL|KILL|QUIT|MAPREDUCE|ASC|DESC|THROUGH|SHIP|CACHE|DECLARE|CASE|WHEN|THEN|END|IN|PARTITION|FULL|IMPORT|IF|ONSCHEMA|INPUT|OUTPUT)\\b/,\n            caseInsensitive: true\n        }, {\n            token: \"storage.datatypes.pig\",\n            regex: /\\b(?:int|long|float|double|chararray|bytearray|boolean|datetime|biginteger|bigdecimal|tuple|bag|map)\\b/,\n            caseInsensitive: true\n        }, {\n            token: \"support.function.storage.pig\",\n            regex: /\\b(?:PigStorage|BinStorage|BinaryStorage|PigDump|HBaseStorage|JsonLoader|JsonStorage|AvroStorage|TextLoader|PigStreaming|TrevniStorage|AccumuloStorage)\\b/\n        }, {\n            token: \"support.function.udf.pig\",\n            regex: /\\b(?:DIFF|TOBAG|TOMAP|TOP|TOTUPLE|RANDOM|FLATTEN|flatten|CUBE|ROLLUP|IsEmpty|ARITY|PluckTuple|SUBTRACT|BagToString)\\b/\n        }, {\n            token: \"support.function.udf.math.pig\",\n            regex: /\\b(?:ABS|ACOS|ASIN|ATAN|CBRT|CEIL|COS|COSH|EXP|FLOOR|LOG|LOG10|ROUND|ROUND_TO|SIN|SINH|SQRT|TAN|TANH|AVG|COUNT|COUNT_STAR|MAX|MIN|SUM|COR|COV)\\b/\n        }, {\n            token: \"support.function.udf.string.pig\",\n            regex: /\\b(?:CONCAT|INDEXOF|LAST_INDEX_OF|LCFIRST|LOWER|REGEX_EXTRACT|REGEX_EXTRACT_ALL|REPLACE|SIZE|STRSPLIT|SUBSTRING|TOKENIZE|TRIM|UCFIRST|UPPER|LTRIM|RTRIM|ENDSWITH|STARTSWITH|TRIM)\\b/\n        }, {\n            token: \"support.function.udf.datetime.pig\",\n            regex: /\\b(?:AddDuration|CurrentTime|DaysBetween|GetDay|GetHour|GetMilliSecond|GetMinute|GetMonth|GetSecond|GetWeek|GetWeekYear|GetYear|HoursBetween|MilliSecondsBetween|MinutesBetween|MonthsBetween|SecondsBetween|SubtractDuration|ToDate|WeeksBetween|YearsBetween|ToMilliSeconds|ToString|ToUnixTime)\\b/\n        }, {\n            token: \"support.function.command.pig\",\n            regex: /\\b(?:cat|cd|copyFromLocal|copyToLocal|cp|ls|mkdir|mv|pwd|rm)\\b/\n        }, {\n            token: \"variable.pig\",\n            regex: /\\$[a_zA-Z0-9_]+/\n        }, {\n            token: \"constant.language.pig\",\n            regex: /\\b(?:NULL|true|false|stdin|stdout|stderr)\\b/,\n            caseInsensitive: true\n        }, {\n            token: \"constant.numeric.pig\",\n            regex: /\\b\\d+(?:\\.\\d+)?\\b/\n        }, {\n            token: \"keyword.operator.comparison.pig\",\n            regex: /!=|==|<|>|<=|>=|\\b(?:MATCHES|IS|OR|AND|NOT)\\b/,\n            caseInsensitive: true\n        }, {\n            token: \"keyword.operator.arithmetic.pig\",\n            regex: /\\+|\\-|\\*|\\/|\\%|\\?|:|::|\\.\\.|#/\n        }, {\n            token: \"string.quoted.double.pig\",\n            regex: /\"/,\n            push: [{\n                token: \"string.quoted.double.pig\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.pig\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.pig\"\n            }]\n        }, {\n            token: \"string.quoted.single.pig\",\n            regex: /'/,\n            push: [{\n                token: \"string.quoted.single.pig\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.pig\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.pig\"\n            }]\n        }, {\n            todo: {\n                token: [\n                    \"text\",\n                    \"keyword.parameter.pig\",\n                    \"text\",\n                    \"storage.type.parameter.pig\"\n                ],\n                regex: /^(\\s*)(set)(\\s+)(\\S+)/,\n                caseInsensitive: true,\n                push: [{\n                    token: \"text\",\n                    regex: /$/,\n                    next: \"pop\"\n                }, {\n                    include: \"$self\"\n                }]\n            }\n        }, {\n            token: [\n                \"text\",\n                \"keyword.alias.pig\",\n                \"text\",\n                \"storage.type.alias.pig\"\n            ],\n            regex: /(\\s*)(DEFINE|DECLARE|REGISTER)(\\s+)(\\S+)/,\n            caseInsensitive: true,\n            push: [{\n                token: \"text\",\n                regex: /;?$/,\n                next: \"pop\"\n            }]\n        }]\n    };\n\n    this.normalizeRules();\n};\n\nPigHighlightRules.metaData = {\n    fileTypes: [\"pig\"],\n    name: \"Pig\",\n    scopeName: \"source.pig\"\n};\n\n\noop.inherits(PigHighlightRules, TextHighlightRules);\n\nexports.PigHighlightRules = PigHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n\n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n\n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n\n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/pig\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/pig_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PigHighlightRules = acequire(\"./pig_highlight_rules\").PigHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PigHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/pig\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}