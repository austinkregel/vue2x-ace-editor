{"version":3,"sources":["webpack:///./node_modules/brace/mode/prolog.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PrologHighlightRules","this","$rules","start","include","#atom","token","regex","#basic_elem","#basic_fact","#builtins","#comment","push","next","defaultToken","#constants","#directive","#expr","#fact","#list","#operators","#parameter","#rule","#statement","#string","#variable","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"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","file":"js/chunk-2d0c1518.7f677c96.js","sourcesContent":["ace.define(\"ace/mode/prolog_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PrologHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { include: '#comment' },\n         { include: '#basic_fact' },\n         { include: '#rule' },\n         { include: '#directive' },\n         { include: '#fact' } ],\n      '#atom': \n       [ { token: 'constant.other.atom.prolog',\n           regex: '\\\\b[a-z][a-zA-Z0-9_]*\\\\b' },\n         { token: 'constant.numeric.prolog',\n           regex: '-?\\\\d+(?:\\\\.\\\\d+)?' },\n         { include: '#string' } ],\n      '#basic_elem': \n       [ { include: '#comment' },\n         { include: '#statement' },\n         { include: '#constants' },\n         { include: '#operators' },\n         { include: '#builtins' },\n         { include: '#list' },\n         { include: '#atom' },\n         { include: '#variable' } ],\n      '#basic_fact': \n       [ { token: \n            [ 'entity.name.function.fact.basic.prolog',\n              'punctuation.end.fact.basic.prolog' ],\n           regex: '([a-z]\\\\w*)(\\\\.)' } ],\n      '#builtins': \n       [ { token: 'support.function.builtin.prolog',\n           regex: '\\\\b(?:abolish|abort|ancestors|arg|ascii|assert[az]|atom(?:ic)?|body|char|close|conc|concat|consult|define|definition|dynamic|dump|fail|file|free|free_proc|functor|getc|goal|halt|head|head|integer|length|listing|match_args|member|next_clause|nl|nonvar|nth|number|cvars|nvars|offset|op|print?|prompt|putc|quoted|ratom|read|redefine|rename|retract(?:all)?|see|seeing|seen|skip|spy|statistics|system|tab|tell|telling|term|time|told|univ|unlink_clause|unspy_predicate|var|write)\\\\b' } ],\n      '#comment': \n       [ { token: \n            [ 'punctuation.definition.comment.prolog',\n              'comment.line.percentage.prolog' ],\n           regex: '(%)(.*$)' },\n         { token: 'punctuation.definition.comment.prolog',\n           regex: '/\\\\*',\n           push: \n            [ { token: 'punctuation.definition.comment.prolog',\n                regex: '\\\\*/',\n                next: 'pop' },\n              { defaultToken: 'comment.block.prolog' } ] } ],\n      '#constants': \n       [ { token: 'constant.language.prolog',\n           regex: '\\\\b(?:true|false|yes|no)\\\\b' } ],\n      '#directive': \n       [ { token: 'keyword.operator.directive.prolog',\n           regex: ':-',\n           push: \n            [ { token: 'meta.directive.prolog', regex: '\\\\.', next: 'pop' },\n              { include: '#comment' },\n              { include: '#statement' },\n              { defaultToken: 'meta.directive.prolog' } ] } ],\n      '#expr': \n       [ { include: '#comments' },\n         { token: 'meta.expression.prolog',\n           regex: '\\\\(',\n           push: \n            [ { token: 'meta.expression.prolog', regex: '\\\\)', next: 'pop' },\n              { include: '#expr' },\n              { defaultToken: 'meta.expression.prolog' } ] },\n         { token: 'keyword.control.cutoff.prolog', regex: '!' },\n         { token: 'punctuation.control.and.prolog', regex: ',' },\n         { token: 'punctuation.control.or.prolog', regex: ';' },\n         { include: '#basic_elem' } ],\n      '#fact': \n       [ { token: \n            [ 'entity.name.function.fact.prolog',\n              'punctuation.begin.fact.parameters.prolog' ],\n           regex: '([a-z]\\\\w*)(\\\\()(?!.*:-)',\n           push: \n            [ { token: \n                 [ 'punctuation.end.fact.parameters.prolog',\n                   'punctuation.end.fact.prolog' ],\n                regex: '(\\\\))(\\\\.?)',\n                next: 'pop' },\n              { include: '#parameter' },\n              { defaultToken: 'meta.fact.prolog' } ] } ],\n      '#list': \n       [ { token: 'punctuation.begin.list.prolog',\n           regex: '\\\\[(?=.*\\\\])',\n           push: \n            [ { token: 'punctuation.end.list.prolog',\n                regex: '\\\\]',\n                next: 'pop' },\n              { include: '#comment' },\n              { token: 'punctuation.separator.list.prolog', regex: ',' },\n              { token: 'punctuation.concat.list.prolog',\n                regex: '\\\\|',\n                push: \n                 [ { token: 'meta.list.concat.prolog',\n                     regex: '(?=\\\\s*\\\\])',\n                     next: 'pop' },\n                   { include: '#basic_elem' },\n                   { defaultToken: 'meta.list.concat.prolog' } ] },\n              { include: '#basic_elem' },\n              { defaultToken: 'meta.list.prolog' } ] } ],\n      '#operators': \n       [ { token: 'keyword.operator.prolog',\n           regex: '\\\\\\\\\\\\+|\\\\bnot\\\\b|\\\\bis\\\\b|->|[><]|[><\\\\\\\\:=]?=|(?:=\\\\\\\\|\\\\\\\\=)=' } ],\n      '#parameter': \n       [ { token: 'variable.language.anonymous.prolog',\n           regex: '\\\\b_\\\\b' },\n         { token: 'variable.parameter.prolog',\n           regex: '\\\\b[A-Z_]\\\\w*\\\\b' },\n         { token: 'punctuation.separator.parameters.prolog', regex: ',' },\n         { include: '#basic_elem' },\n         { token: 'text', regex: '[^\\\\s]' } ],\n      '#rule': \n       [ { token: 'meta.rule.prolog',\n           regex: '(?=[a-z]\\\\w*.*:-)',\n           push: \n            [ { token: 'punctuation.rule.end.prolog',\n                regex: '\\\\.',\n                next: 'pop' },\n              { token: 'meta.rule.signature.prolog',\n                regex: '(?=[a-z]\\\\w*.*:-)',\n                push: \n                 [ { token: 'meta.rule.signature.prolog',\n                     regex: '(?=:-)',\n                     next: 'pop' },\n                   { token: 'entity.name.function.rule.prolog',\n                     regex: '[a-z]\\\\w*(?=\\\\(|\\\\s*:-)' },\n                   { token: 'punctuation.rule.parameters.begin.prolog',\n                     regex: '\\\\(',\n                     push: \n                      [ { token: 'punctuation.rule.parameters.end.prolog',\n                          regex: '\\\\)',\n                          next: 'pop' },\n                        { include: '#parameter' },\n                        { defaultToken: 'meta.rule.parameters.prolog' } ] },\n                   { defaultToken: 'meta.rule.signature.prolog' } ] },\n              { token: 'keyword.operator.definition.prolog',\n                regex: ':-',\n                push: \n                 [ { token: 'meta.rule.definition.prolog',\n                     regex: '(?=\\\\.)',\n                     next: 'pop' },\n                   { include: '#comment' },\n                   { include: '#expr' },\n                   { defaultToken: 'meta.rule.definition.prolog' } ] },\n              { defaultToken: 'meta.rule.prolog' } ] } ],\n      '#statement': \n       [ { token: 'meta.statement.prolog',\n           regex: '(?=[a-z]\\\\w*\\\\()',\n           push: \n            [ { token: 'punctuation.end.statement.parameters.prolog',\n                regex: '\\\\)',\n                next: 'pop' },\n              { include: '#builtins' },\n              { include: '#atom' },\n              { token: 'punctuation.begin.statement.parameters.prolog',\n                regex: '\\\\(',\n                push: \n                 [ { token: 'meta.statement.parameters.prolog',\n                     regex: '(?=\\\\))',\n                     next: 'pop' },\n                   { token: 'punctuation.separator.statement.prolog', regex: ',' },\n                   { include: '#basic_elem' },\n                   { defaultToken: 'meta.statement.parameters.prolog' } ] },\n              { defaultToken: 'meta.statement.prolog' } ] } ],\n      '#string': \n       [ { token: 'punctuation.definition.string.begin.prolog',\n           regex: '\\'',\n           push: \n            [ { token: 'punctuation.definition.string.end.prolog',\n                regex: '\\'',\n                next: 'pop' },\n              { token: 'constant.character.escape.prolog', regex: '\\\\\\\\.' },\n              { token: 'constant.character.escape.quote.prolog',\n                regex: '\\'\\'' },\n              { defaultToken: 'string.quoted.single.prolog' } ] } ],\n      '#variable': \n       [ { token: 'variable.language.anonymous.prolog',\n           regex: '\\\\b_\\\\b' },\n         { token: 'variable.other.prolog',\n           regex: '\\\\b[A-Z_][a-zA-Z0-9_]*\\\\b' } ] };\n    \n    this.normalizeRules();\n};\n\nPrologHighlightRules.metaData = { fileTypes: [ 'plg', 'prolog' ],\n      foldingStartMarker: '(%\\\\s*region \\\\w*)|([a-z]\\\\w*.*:- ?)',\n      foldingStopMarker: '(%\\\\s*end(\\\\s*region)?)|(?=\\\\.)',\n      keyEquivalent: '^~P',\n      name: 'Prolog',\n      scopeName: 'source.prolog' };\n\n\noop.inherits(PrologHighlightRules, TextHighlightRules);\n\nexports.PrologHighlightRules = PrologHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/prolog\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prolog_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PrologHighlightRules = acequire(\"./prolog_highlight_rules\").PrologHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PrologHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"%\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/prolog\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}