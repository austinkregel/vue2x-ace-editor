{"version":3,"sources":["webpack:///./node_modules/brace/mode/pascal.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","PascalHighlightRules","this","$rules","start","caseInsensitive","token","regex","push_","next","defaultToken","push","normalizeRules","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","line","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","end","$id"],"mappings":"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","file":"js/chunk-2d225fe9.eb8a3c40.js","sourcesContent":["ace.define(\"ace/mode/pascal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar PascalHighlightRules = function() {\n\n    this.$rules = { start: \n       [ { caseInsensitive: true,\n           token: 'keyword.control.pascal',\n           regex: '\\\\b(?:(absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor))\\\\b' },\n         { caseInsensitive: true,           \n           token: \n            [ 'variable.pascal', \"text\",\n              'storage.type.prototype.pascal',\n              'entity.name.function.prototype.pascal' ],\n           regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?(?=(?:\\\\(.*?\\\\))?;\\\\s*(?:attribute|forward|external))' },\n         { caseInsensitive: true,\n           token: \n            [ 'variable.pascal', \"text\",\n              'storage.type.function.pascal',\n              'entity.name.function.pascal' ],\n           regex: '\\\\b(function|procedure)(\\\\s+)(\\\\w+)(\\\\.\\\\w+)?' },\n         { token: 'constant.numeric.pascal',\n           regex: '\\\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\\\.?[0-9]*)|(\\\\.[0-9]+))((e|E)(\\\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b' },\n         { token: 'punctuation.definition.comment.pascal',\n           regex: '--.*$',\n           push_: \n            [ { token: 'comment.line.double-dash.pascal.one',\n                regex: '$',\n                next: 'pop' },\n              { defaultToken: 'comment.line.double-dash.pascal.one' } ] },\n         { token: 'punctuation.definition.comment.pascal',\n           regex: '//.*$',\n           push_: \n            [ { token: 'comment.line.double-slash.pascal.two',\n                regex: '$',\n                next: 'pop' },\n              { defaultToken: 'comment.line.double-slash.pascal.two' } ] },\n         { token: 'punctuation.definition.comment.pascal',\n           regex: '\\\\(\\\\*',\n           push: \n            [ { token: 'punctuation.definition.comment.pascal',\n                regex: '\\\\*\\\\)',\n                next: 'pop' },\n              { defaultToken: 'comment.block.pascal.one' } ] },\n         { token: 'punctuation.definition.comment.pascal',\n           regex: '\\\\{',\n           push: \n            [ { token: 'punctuation.definition.comment.pascal',\n                regex: '\\\\}',\n                next: 'pop' },\n              { defaultToken: 'comment.block.pascal.two' } ] },\n         { token: 'punctuation.definition.string.begin.pascal',\n           regex: '\"',\n           push: \n            [ { token: 'constant.character.escape.pascal', regex: '\\\\\\\\.' },\n              { token: 'punctuation.definition.string.end.pascal',\n                regex: '\"',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.double.pascal' } ]\n            },\n         { token: 'punctuation.definition.string.begin.pascal',\n           regex: '\\'',\n           push: \n            [ { token: 'constant.character.escape.apostrophe.pascal',\n                regex: '\\'\\'' },\n              { token: 'punctuation.definition.string.end.pascal',\n                regex: '\\'',\n                next: 'pop' },\n              { defaultToken: 'string.quoted.single.pascal' } ] },\n          { token: 'keyword.operator',\n           regex: '[+\\\\-;,/*%]|:=|=' } ] };\n    \n    this.normalizeRules();\n};\n\noop.inherits(PascalHighlightRules, TextHighlightRules);\n\nexports.PascalHighlightRules = PascalHighlightRules;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/pascal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/pascal_highlight_rules\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar PascalHighlightRules = acequire(\"./pascal_highlight_rules\").PascalHighlightRules;\nvar FoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = PascalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n       \n    this.lineCommentStart = [\"--\", \"//\"];\n    this.blockComment = [\n        {start: \"(*\", end: \"*)\"},\n        {start: \"{\", end: \"}\"}\n    ];\n    \n    this.$id = \"ace/mode/pascal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}