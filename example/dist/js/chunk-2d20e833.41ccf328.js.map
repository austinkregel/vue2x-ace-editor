{"version":3,"sources":["webpack:///./node_modules/brace/mode/kotlin.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","KotlinHighlightRules","this","$rules","start","include","token","regex","#classes","push","next","#comments","defaultToken","#constants","#expressions","#functions","#generics","#getters-and-setters","#imports","#keywords","#namespaces","#parameters","#statements","#strings","#typedefs","#types","#variables","normalizeRules","metaData","fileTypes","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","replace","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","length","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$id"],"mappings":"iGAAAA,IAAAC,OAAA,wHAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAI,EAAAJ,EAAA,0BAAAI,mBAEAC,EAAA,WAEAC,KAAAC,OAAA,CACAC,MAAA,EACAC,QAAA,aACS,CACTC,MAAA,CACA,OACA,uBACA,OACA,6BACA,QAEAC,MAAA,6CACS,CACTF,QAAA,YACS,CACTA,QAAA,gBAEAG,WAAA,EACAF,MAAA,OACAC,MAAA,8CACAE,KAAA,EACAH,MAAA,OACAC,MAAA,UACAG,KAAA,OACa,CACbJ,MAAA,gCACAC,MAAA,kDACAE,KAAA,EACAH,MAAA,OACAC,MAAA,eACAG,KAAA,OACiB,CACjBJ,MAAA,uBACAC,MAAA,cACiB,CACjBD,MAAA,gCACAC,MAAA,SAEa,CACbD,MAAA,OACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,IACAG,KAAA,OACiB,CACjBL,QAAA,eAEa,CACbC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,iBAEa,CACbC,MAAA,sCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,UACAG,KAAA,OACiB,CACjBJ,MAAA,sCACAC,MAAA,OACiB,CACjBD,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACqB,CACrBL,QAAA,oBAGa,CACbC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,oBAIAM,YAAA,EACAL,MAAA,wCACAC,MAAA,OACAE,KAAA,EACAH,MAAA,wCACAC,MAAA,OACAG,KAAA,OACa,CACbE,aAAA,0BAES,CACTN,MAAA,CACA,OACA,wCACA,oCAEAC,MAAA,qBAEAM,aAAA,EACAP,MAAA,2BACAC,MAAA,sCACS,CACTD,MAAA,0BACAC,MAAA,6GACS,CACTD,MAAA,wBACAC,MAAA,wBAEAO,eAAA,EACAR,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACa,CACbL,QAAA,kBAES,CACTA,QAAA,UACS,CACTA,QAAA,YACS,CACTA,QAAA,cACS,CACTA,QAAA,aACS,CACTA,QAAA,cAEAU,aAAA,EACAT,MAAA,OACAC,MAAA,aACAE,KAAA,EACAH,MAAA,OACAC,MAAA,UACAG,KAAA,OACa,CACbJ,MAAA,uBACAC,MAAA,UACAE,KAAA,EACAH,MAAA,OACAC,MAAA,SACAG,KAAA,OACiB,CACjBJ,MAAA,OACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,IACAG,KAAA,OACqB,CACrBL,QAAA,eAEiB,CACjBC,MAAA,uCACAC,MAAA,+BAEa,CACbD,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,iBAEa,CACbC,MAAA,sCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,YACAG,KAAA,OACiB,CACjBL,QAAA,YAEa,CACbC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,SACAG,KAAA,OACiB,CACjBL,QAAA,iBAEa,CACbC,MAAA,qCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,QACAG,KAAA,OACiB,CACjBL,QAAA,qBAIAW,YAAA,EACAV,MAAA,sCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,UACAG,KAAA,OACa,CACbL,QAAA,YAES,CACTA,QAAA,aACS,CACTC,MAAA,8BACAC,MAAA,QAEAU,uBAAA,EACAX,MAAA,uCACAC,MAAA,wBACAE,KAAA,EACAH,MAAA,OACAC,MAAA,mBACAG,KAAA,OACa,CACbJ,MAAA,qCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,gBACAG,KAAA,OACiB,CACjBL,QAAA,kBAEa,CACbC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,oBAGS,CACTC,MAAA,uCACAC,MAAA,uBACAE,KAAA,EACAH,MAAA,OACAC,MAAA,mBACAG,KAAA,OACa,CACbJ,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,iBAEa,CACbC,MAAA,qCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,gBACAG,KAAA,OACiB,CACjBL,QAAA,kBAEa,CACbC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACiB,CACjBL,QAAA,qBAIAa,WAAA,EACAZ,MAAA,CACA,OACA,uBACA,OACA,wBAEAC,MAAA,0CAEAY,YAAA,EACAb,MAAA,0BACAC,MAAA,uMACS,CACTD,MAAA,yCACAC,MAAA,mCACS,CACTD,MAAA,yBACAC,MAAA,iEACS,CACTD,MAAA,0BACAC,MAAA,2BACS,CACTD,MAAA,qCACAC,MAAA,2BACS,CACTD,MAAA,qCACAC,MAAA,KACS,CACTD,MAAA,sCACAC,MAAA,KACS,CACTD,MAAA,8BACAC,MAAA,MACS,CACTD,MAAA,8CACAC,MAAA,aACS,CACTD,MAAA,qCACAC,MAAA,iBACS,CACTD,MAAA,4CACAC,MAAA,mBACS,CACTD,MAAA,kCACAC,MAAA,aACS,CACTD,MAAA,gCACAC,MAAA,QACS,CACTD,MAAA,gCACAC,MAAA,MAEAa,cAAA,EACAd,MAAA,uBACAC,MAAA,iBACS,CACTD,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACa,CACbL,QAAA,kBAGAgB,cAAA,EACAf,MAAA,sCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,aACAG,KAAA,OACa,CACbL,QAAA,YAES,CACTC,MAAA,sCACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,WACAG,KAAA,OACa,CACbL,QAAA,kBAES,CACTA,QAAA,aACS,CACTC,MAAA,qCACAC,MAAA,QAEAe,cAAA,EACAjB,QAAA,eACS,CACTA,QAAA,aACS,CACTA,QAAA,YACS,CACTA,QAAA,cACS,CACTA,QAAA,cACS,CACTA,QAAA,wBACS,CACTA,QAAA,iBAEAkB,WAAA,EACAjB,MAAA,6CACAC,MAAA,MACAE,KAAA,EACAH,MAAA,2CACAC,MAAA,MACAG,KAAA,OACa,CACbJ,MAAA,qCACAC,MAAA,sBACa,CACbD,MAAA,mCACAC,MAAA,OACa,CACbK,aAAA,gCAES,CACTN,MAAA,6CACAC,MAAA,IACAE,KAAA,EACAH,MAAA,2CACAC,MAAA,IACAG,KAAA,OACa,CACbJ,MAAA,qCACAC,MAAA,sBACa,CACbD,MAAA,mCACAC,MAAA,OACa,CACbK,aAAA,iCAES,CACTN,MAAA,6CACAC,MAAA,IACAE,KAAA,EACAH,MAAA,2CACAC,MAAA,IACAG,KAAA,OACa,CACbJ,MAAA,mCACAC,MAAA,OACa,CACbK,aAAA,iCAES,CACTN,MAAA,6CACAC,MAAA,IACAE,KAAA,EACAH,MAAA,2CACAC,MAAA,IACAG,KAAA,OACa,CACbE,aAAA,kCAGAY,YAAA,EACAlB,MAAA,OACAC,MAAA,cACAE,KAAA,EACAH,MAAA,OACAC,MAAA,QACAG,KAAA,OACa,CACbJ,MAAA,uBACAC,MAAA,YACa,CACbD,MAAA,OACAC,MAAA,IACAE,KAAA,EACAH,MAAA,OACAC,MAAA,IACAG,KAAA,OACiB,CACjBL,QAAA,eAEa,CACbA,QAAA,mBAGAoB,SAAA,EACAnB,MAAA,8BACAC,MAAA,iFACS,CACTD,MAAA,oCACAC,MAAA,iGACS,CACTD,MAAA,CACA,yCACA,QAEAC,MAAA,0BACAE,KAAA,EACAH,MAAA,OACAC,MAAA,IACAG,KAAA,OACa,CACbL,QAAA,UACa,CACbA,QAAA,eAES,CACTC,MAAA,OACAC,MAAA,OACAE,KAAA,EACAH,MAAA,OACAC,MAAA,IACAG,KAAA,OACa,CACbL,QAAA,UACa,CACbA,QAAA,eAES,CACTC,MAAA,yCACAC,MAAA,UACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACa,CACbL,QAAA,kBAES,CACTC,MAAA,OACAC,MAAA,KACAE,KAAA,EACAH,MAAA,OACAC,MAAA,KACAG,KAAA,OACa,CACbL,QA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","file":"js/chunk-2d20e833.41ccf328.js","sourcesContent":["ace.define(\"ace/mode/kotlin_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar KotlinHighlightRules = function() {\n\n    this.$rules = {\n        start: [{\n            include: \"#comments\"\n        }, {\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"entity.name.package.kotlin\",\n                \"text\"\n            ],\n            regex: /^(\\s*)(package)\\b(?:(\\s*)([^ ;$]+)(\\s*))?/\n        }, {\n            include: \"#imports\"\n        }, {\n            include: \"#statements\"\n        }],\n        \"#classes\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:companion|class|object|interface))/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: [\"keyword.other.kotlin\", \"text\"],\n                regex: /\\b((?:companion\\s*)?)(class|object|interface)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=<|{|\\(|:)/,\n                    next: \"pop\"\n                }, {\n                    token: \"keyword.other.kotlin\",\n                    regex: /\\bobject\\b/\n                }, {\n                    token: \"entity.name.type.class.kotlin\",\n                    regex: /\\w+/\n                }]\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"entity.other.inherited-class.kotlin\",\n                    regex: /\\w+/\n                }, {\n                    token: \"text\",\n                    regex: /\\(/,\n                    push: [{\n                        token: \"text\",\n                        regex: /\\)/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#expressions\"\n                    }]\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }]\n        }],\n        \"#comments\": [{\n            token: \"punctuation.definition.comment.kotlin\",\n            regex: /\\/\\*/,\n            push: [{\n                token: \"punctuation.definition.comment.kotlin\",\n                regex: /\\*\\//,\n                next: \"pop\"\n            }, {\n                defaultToken: \"comment.block.kotlin\"\n            }]\n        }, {\n            token: [\n                \"text\",\n                \"punctuation.definition.comment.kotlin\",\n                \"comment.line.double-slash.kotlin\"\n            ],\n            regex: /(\\s*)(\\/\\/)(.*$)/\n        }],\n        \"#constants\": [{\n            token: \"constant.language.kotlin\",\n            regex: /\\b(?:true|false|null|this|super)\\b/\n        }, {\n            token: \"constant.numeric.kotlin\",\n            regex: /\\b(?:0(?:x|X)[0-9a-fA-F]*|(?:[0-9]+\\.?[0-9]*|\\.[0-9]+)(?:(?:e|E)(?:\\+|-)?[0-9]+)?)(?:[LlFfUuDd]|UL|ul)?\\b/\n        }, {\n            token: \"constant.other.kotlin\",\n            regex: /\\b[A-Z][A-Z0-9_]+\\b/\n        }],\n        \"#expressions\": [{\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#types\"\n        }, {\n            include: \"#strings\"\n        }, {\n            include: \"#constants\"\n        }, {\n            include: \"#comments\"\n        }, {\n            include: \"#keywords\"\n        }],\n        \"#functions\": [{\n            token: \"text\",\n            regex: /(?=\\s*fun)/,\n            push: [{\n                token: \"text\",\n                regex: /}|(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\bfun\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\()/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.function.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?={|=|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=\\})/,\n                    next: \"pop\"\n                }, {\n                    include: \"#statements\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#generics\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|>)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"storage.type.generic.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#getters-and-setters\": [{\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(get)\\b(\\s*\\(\\s*\\))/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bset\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }, {\n            token: [\"entity.name.function.kotlin\", \"text\"],\n            regex: /\\b(set)\\b(\\s*)(?=\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\}|(?=\\bget\\b)|$/,\n                next: \"pop\"\n            }, {\n                token: \"text\",\n                regex: /\\(/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#parameters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$|\\bset\\b)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }, {\n                token: \"text\",\n                regex: /\\{/,\n                push: [{\n                    token: \"text\",\n                    regex: /\\}/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }]\n            }]\n        }],\n        \"#imports\": [{\n            token: [\n                \"text\",\n                \"keyword.other.kotlin\",\n                \"text\",\n                \"keyword.other.kotlin\"\n            ],\n            regex: /^(\\s*)(import)(\\s+[^ $]+\\s+)((?:as)?)/\n        }],\n        \"#keywords\": [{\n            token: \"storage.modifier.kotlin\",\n            regex: /\\b(?:var|val|public|private|protected|abstract|final|enum|open|attribute|annotation|override|inline|var|val|vararg|lazy|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof)\\b/\n        }, {\n            token: \"keyword.control.catch-exception.kotlin\",\n            regex: /\\b(?:try|catch|finally|throw)\\b/\n        }, {\n            token: \"keyword.control.kotlin\",\n            regex: /\\b(?:if|else|while|for|do|return|when|where|break|continue)\\b/\n        }, {\n            token: \"keyword.operator.kotlin\",\n            regex: /\\b(?:in|is|as|assert)\\b/\n        }, {\n            token: \"keyword.operator.comparison.kotlin\",\n            regex: /==|!=|===|!==|<=|>=|<|>/\n        }, {\n            token: \"keyword.operator.assignment.kotlin\",\n            regex: /=/\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/\n        }, {\n            token: \"keyword.operator.dot.kotlin\",\n            regex: /\\./\n        }, {\n            token: \"keyword.operator.increment-decrement.kotlin\",\n            regex: /\\-\\-|\\+\\+/\n        }, {\n            token: \"keyword.operator.arithmetic.kotlin\",\n            regex: /\\-|\\+|\\*|\\/|%/\n        }, {\n            token: \"keyword.operator.arithmetic.assign.kotlin\",\n            regex: /\\+=|\\-=|\\*=|\\/=/\n        }, {\n            token: \"keyword.operator.logical.kotlin\",\n            regex: /!|&&|\\|\\|/\n        }, {\n            token: \"keyword.operator.range.kotlin\",\n            regex: /\\.\\./\n        }, {\n            token: \"punctuation.terminator.kotlin\",\n            regex: /;/\n        }],\n        \"#namespaces\": [{\n            token: \"keyword.other.kotlin\",\n            regex: /\\bnamespace\\b/\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }],\n        \"#parameters\": [{\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /:/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\)|=)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /=/,\n            push: [{\n                token: \"text\",\n                regex: /(?=,|\\))/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            include: \"#keywords\"\n        }, {\n            token: \"variable.parameter.function.kotlin\",\n            regex: /\\w+/\n        }],\n        \"#statements\": [{\n            include: \"#namespaces\"\n        }, {\n            include: \"#typedefs\"\n        }, {\n            include: \"#classes\"\n        }, {\n            include: \"#functions\"\n        }, {\n            include: \"#variables\"\n        }, {\n            include: \"#getters-and-setters\"\n        }, {\n            include: \"#expressions\"\n        }],\n        \"#strings\": [{\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"\"\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"\"\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.third.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /\"/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /\"/,\n                next: \"pop\"\n            }, {\n                token: \"variable.parameter.template.kotlin\",\n                regex: /\\$\\w+|\\$\\{[^\\}]+\\}/\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.double.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /'/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /'/,\n                next: \"pop\"\n            }, {\n                token: \"constant.character.escape.kotlin\",\n                regex: /\\\\./\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }, {\n            token: \"punctuation.definition.string.begin.kotlin\",\n            regex: /`/,\n            push: [{\n                token: \"punctuation.definition.string.end.kotlin\",\n                regex: /`/,\n                next: \"pop\"\n            }, {\n                defaultToken: \"string.quoted.single.kotlin\"\n            }]\n        }],\n        \"#typedefs\": [{\n            token: \"text\",\n            regex: /(?=\\s*type)/,\n            push: [{\n                token: \"text\",\n                regex: /(?=$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\btype\\b/\n            }, {\n                token: \"text\",\n                regex: /</,\n                push: [{\n                    token: \"text\",\n                    regex: />/,\n                    next: \"pop\"\n                }, {\n                    include: \"#generics\"\n                }]\n            }, {\n                include: \"#expressions\"\n            }]\n        }],\n        \"#types\": [{\n            token: \"storage.type.buildin.kotlin\",\n            regex: /\\b(?:Any|Unit|String|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b/\n        }, {\n            token: \"storage.type.buildin.array.kotlin\",\n            regex: /\\b(?:IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b/\n        }, {\n            token: [\n                \"storage.type.buildin.collection.kotlin\",\n                \"text\"\n            ],\n            regex: /\\b(Array|List|Map)(<\\b)/,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\w+</,\n            push: [{\n                token: \"text\",\n                regex: />/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }, {\n                include: \"#keywords\"\n            }]\n        }, {\n            token: [\"keyword.operator.tuple.kotlin\", \"text\"],\n            regex: /(#)(\\()/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#expressions\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\{/,\n            push: [{\n                token: \"text\",\n                regex: /\\}/,\n                next: \"pop\"\n            }, {\n                include: \"#statements\"\n            }]\n        }, {\n            token: \"text\",\n            regex: /\\(/,\n            push: [{\n                token: \"text\",\n                regex: /\\)/,\n                next: \"pop\"\n            }, {\n                include: \"#types\"\n            }]\n        }, {\n            token: \"keyword.operator.declaration.kotlin\",\n            regex: /->/\n        }],\n        \"#variables\": [{\n            token: \"text\",\n            regex: /(?=\\s*(?:var|val))/,\n            push: [{\n                token: \"text\",\n                regex: /(?=:|=|$)/,\n                next: \"pop\"\n            }, {\n                token: \"keyword.other.kotlin\",\n                regex: /\\b(?:var|val)\\b/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=:|=|$)/,\n                    next: \"pop\"\n                }, {\n                    token: \"text\",\n                    regex: /</,\n                    push: [{\n                        token: \"text\",\n                        regex: />/,\n                        next: \"pop\"\n                    }, {\n                        include: \"#generics\"\n                    }]\n                }, {\n                    token: [\"text\", \"entity.name.variable.kotlin\"],\n                    regex: /((?:[\\.<\\?>\\w]+\\.)?)(\\w+)/\n                }]\n            }, {\n                token: \"keyword.operator.declaration.kotlin\",\n                regex: /:/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?==|$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#types\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }, {\n                token: \"keyword.operator.assignment.kotlin\",\n                regex: /=/,\n                push: [{\n                    token: \"text\",\n                    regex: /(?=$)/,\n                    next: \"pop\"\n                }, {\n                    include: \"#expressions\"\n                }, {\n                    include: \"#getters-and-setters\"\n                }]\n            }]\n        }]\n    };\n\n    this.normalizeRules();\n};\n\nKotlinHighlightRules.metaData = {\n    fileTypes: [\"kt\", \"kts\"],\n    name: \"Kotlin\",\n    scopeName: \"source.Kotlin\"\n};\n\n\noop.inherits(KotlinHighlightRules, TextHighlightRules);\n\nexports.KotlinHighlightRules = KotlinHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n\n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n\n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n\n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n\n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n\n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n\n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n\n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n\n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n\n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n\n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n\n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n\n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n\n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/kotlin\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/kotlin_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar KotlinHighlightRules = acequire(\"./kotlin_highlight_rules\").KotlinHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = KotlinHighlightRules;\n    this.foldingRules = new FoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.$id = \"ace/mode/kotlin\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}