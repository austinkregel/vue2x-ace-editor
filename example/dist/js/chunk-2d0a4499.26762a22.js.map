{"version":3,"sources":["webpack:///./node_modules/brace/mode/xml.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","XmlHighlightRules","normalize","tagRegex","this","$rules","start","token","regex","next","caseInsensitive","include","defaultToken","processing_instruction","doctype","push","int_subset","cdata","comment","reference","attr_reference","tag","tag_whitespace","whitespace","string","attributes","attribute_value","constructor","normalizeRules","embedTagRules","HighlightRules","prefix","unshift","onMatch","value","currentState","stack","splice","embedRules","call","prototype","inherits","Behaviour","TokenIterator","is","type","lastIndexOf","XmlBehaviour","add","state","action","editor","session","text","quote","selected","doc","getTextRange","getSelectionRange","getWrapBehavioursEnabled","selection","cursor","getCursorPosition","line","getLine","row","rightChar","substring","column","iterator","getCurrentToken","stepBackward","rightSpace","match","range","isMultiLine","end","position","firstChar","charAt","lastChar","length","tokenEnd","getCurrentTokenColumn","stepForward","tokenRow","getCurrentTokenRow","tokenColumn","element","voidElements","hasOwnProperty","toLowerCase","indexOf","nextToken","getTokenAt","nextIndent","$getIndent","indent","getTabString","Range","BaseFoldMode","FoldMode","optionalEndTags","mixin","Tag","tagName","closing","selfClosing","getFoldWidget","foldStyle","_getFirstTagInLine","_findEndTagInLine","getCommentFoldWidget","test","getState","tokens","getTokens","i","startColumn","_readTagForward","_readTagBackward","_pop","top","pop","getFoldWidgetRange","firstTag","getCommentFoldRange","isBackward","fromPoints","lang","TextMode","Mode","XmlFoldMode","WorkerClient","$behaviour","foldingRules","arrayToMap","blockComment","createWorker","worker","__webpack_require__","attachToDocument","getDocument","on","e","setAnnotations","data","clearAnnotations","$id"],"mappings":"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","file":"js/chunk-2d0a4499.26762a22.js","sourcesContent":["ace.define(\"ace/mode/xml_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar XmlHighlightRules = function(normalize) {\n    var tagRegex = \"[_:a-zA-Z\\xc0-\\uffff][-_:.a-zA-Z0-9\\xc0-\\uffff]*\";\n\n    this.$rules = {\n        start : [\n            {token : \"string.cdata.xml\", regex : \"<\\\\!\\\\[CDATA\\\\[\", next : \"cdata\"},\n            {\n                token : [\"punctuation.instruction.xml\", \"keyword.instruction.xml\"],\n                regex : \"(<\\\\?)(\" + tagRegex + \")\", next : \"processing_instruction\"\n            },\n            {token : \"comment.start.xml\", regex : \"<\\\\!--\", next : \"comment\"},\n            {\n                token : [\"xml-pe.doctype.xml\", \"xml-pe.doctype.xml\"],\n                regex : \"(<\\\\!)(DOCTYPE)(?=[\\\\s])\", next : \"doctype\", caseInsensitive: true\n            },\n            {include : \"tag\"},\n            {token : \"text.end-tag-open.xml\", regex: \"</\"},\n            {token : \"text.tag-open.xml\", regex: \"<\"},\n            {include : \"reference\"},\n            {defaultToken : \"text.xml\"}\n        ],\n\n        processing_instruction : [{\n            token : \"entity.other.attribute-name.decl-attribute-name.xml\",\n            regex : tagRegex\n        }, {\n            token : \"keyword.operator.decl-attribute-equals.xml\",\n            regex : \"=\"\n        }, {\n            include: \"whitespace\"\n        }, {\n            include: \"string\"\n        }, {\n            token : \"punctuation.xml-decl.xml\",\n            regex : \"\\\\?>\",\n            next : \"start\"\n        }],\n\n        doctype : [\n            {include : \"whitespace\"},\n            {include : \"string\"},\n            {token : \"xml-pe.doctype.xml\", regex : \">\", next : \"start\"},\n            {token : \"xml-pe.xml\", regex : \"[-_a-zA-Z0-9:]+\"},\n            {token : \"punctuation.int-subset\", regex : \"\\\\[\", push : \"int_subset\"}\n        ],\n\n        int_subset : [{\n            token : \"text.xml\",\n            regex : \"\\\\s+\"\n        }, {\n            token: \"punctuation.int-subset.xml\",\n            regex: \"]\",\n            next: \"pop\"\n        }, {\n            token : [\"punctuation.markup-decl.xml\", \"keyword.markup-decl.xml\"],\n            regex : \"(<\\\\!)(\" + tagRegex + \")\",\n            push : [{\n                token : \"text\",\n                regex : \"\\\\s+\"\n            },\n            {\n                token : \"punctuation.markup-decl.xml\",\n                regex : \">\",\n                next : \"pop\"\n            },\n            {include : \"string\"}]\n        }],\n\n        cdata : [\n            {token : \"string.cdata.xml\", regex : \"\\\\]\\\\]>\", next : \"start\"},\n            {token : \"text.xml\", regex : \"\\\\s+\"},\n            {token : \"text.xml\", regex : \"(?:[^\\\\]]|\\\\](?!\\\\]>))+\"}\n        ],\n\n        comment : [\n            {token : \"comment.end.xml\", regex : \"-->\", next : \"start\"},\n            {defaultToken : \"comment.xml\"}\n        ],\n\n        reference : [{\n            token : \"constant.language.escape.reference.xml\",\n            regex : \"(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)\"\n        }],\n\n        attr_reference : [{\n            token : \"constant.language.escape.reference.attribute-value.xml\",\n            regex : \"(?:&#[0-9]+;)|(?:&#x[0-9a-fA-F]+;)|(?:&[a-zA-Z0-9_:\\\\.-]+;)\"\n        }],\n\n        tag : [{\n            token : [\"meta.tag.punctuation.tag-open.xml\", \"meta.tag.punctuation.end-tag-open.xml\", \"meta.tag.tag-name.xml\"],\n            regex : \"(?:(<)|(</))((?:\" + tagRegex + \":)?\" + tagRegex + \")\",\n            next: [\n                {include : \"attributes\"},\n                {token : \"meta.tag.punctuation.tag-close.xml\", regex : \"/?>\", next : \"start\"}\n            ]\n        }],\n\n        tag_whitespace : [\n            {token : \"text.tag-whitespace.xml\", regex : \"\\\\s+\"}\n        ],\n        whitespace : [\n            {token : \"text.whitespace.xml\", regex : \"\\\\s+\"}\n        ],\n        string: [{\n            token : \"string.xml\",\n            regex : \"'\",\n            push : [\n                {token : \"string.xml\", regex: \"'\", next: \"pop\"},\n                {defaultToken : \"string.xml\"}\n            ]\n        }, {\n            token : \"string.xml\",\n            regex : '\"',\n            push : [\n                {token : \"string.xml\", regex: '\"', next: \"pop\"},\n                {defaultToken : \"string.xml\"}\n            ]\n        }],\n\n        attributes: [{\n            token : \"entity.other.attribute-name.xml\",\n            regex : tagRegex\n        }, {\n            token : \"keyword.operator.attribute-equals.xml\",\n            regex : \"=\"\n        }, {\n            include: \"tag_whitespace\"\n        }, {\n            include: \"attribute_value\"\n        }],\n\n        attribute_value: [{\n            token : \"string.attribute-value.xml\",\n            regex : \"'\",\n            push : [\n                {token : \"string.attribute-value.xml\", regex: \"'\", next: \"pop\"},\n                {include : \"attr_reference\"},\n                {defaultToken : \"string.attribute-value.xml\"}\n            ]\n        }, {\n            token : \"string.attribute-value.xml\",\n            regex : '\"',\n            push : [\n                {token : \"string.attribute-value.xml\", regex: '\"', next: \"pop\"},\n                {include : \"attr_reference\"},\n                {defaultToken : \"string.attribute-value.xml\"}\n            ]\n        }]\n    };\n\n    if (this.constructor === XmlHighlightRules)\n        this.normalizeRules();\n};\n\n\n(function() {\n\n    this.embedTagRules = function(HighlightRules, prefix, tag){\n        this.$rules.tag.unshift({\n            token : [\"meta.tag.punctuation.tag-open.xml\", \"meta.tag.\" + tag + \".tag-name.xml\"],\n            regex : \"(<)(\" + tag + \"(?=\\\\s|>|$))\",\n            next: [\n                {include : \"attributes\"},\n                {token : \"meta.tag.punctuation.tag-close.xml\", regex : \"/?>\", next : prefix + \"start\"}\n            ]\n        });\n\n        this.$rules[tag + \"-end\"] = [\n            {include : \"attributes\"},\n            {token : \"meta.tag.punctuation.tag-close.xml\", regex : \"/?>\",  next: \"start\",\n                onMatch : function(value, currentState, stack) {\n                    stack.splice(0);\n                    return this.token;\n            }}\n        ];\n\n        this.embedRules(HighlightRules, prefix, [{\n            token: [\"meta.tag.punctuation.end-tag-open.xml\", \"meta.tag.\" + tag + \".tag-name.xml\"],\n            regex : \"(</)(\" + tag + \"(?=\\\\s|>|$))\",\n            next: tag + \"-end\"\n        }, {\n            token: \"string.cdata.xml\",\n            regex : \"<\\\\!\\\\[CDATA\\\\[\"\n        }, {\n            token: \"string.cdata.xml\",\n            regex : \"\\\\]\\\\]>\"\n        }]);\n    };\n\n}).call(TextHighlightRules.prototype);\n\noop.inherits(XmlHighlightRules, TextHighlightRules);\n\nexports.XmlHighlightRules = XmlHighlightRules;\n});\n\nace.define(\"ace/mode/behaviour/xml\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/behaviour\",\"ace/token_iterator\",\"ace/lib/lang\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Behaviour = acequire(\"../behaviour\").Behaviour;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\nvar lang = acequire(\"../../lib/lang\");\n\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\n\nvar XmlBehaviour = function () {\n\n    this.add(\"string_dquotes\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == '\"' || text == \"'\") {\n            var quote = text;\n            var selected = session.doc.getTextRange(editor.getSelectionRange());\n            if (selected !== \"\" && selected !== \"'\" && selected != '\"' && editor.getWrapBehavioursEnabled()) {\n                return {\n                    text: quote + selected + quote,\n                    selection: false\n                };\n            }\n\n            var cursor = editor.getCursorPosition();\n            var line = session.doc.getLine(cursor.row);\n            var rightChar = line.substring(cursor.column, cursor.column + 1);\n            var iterator = new TokenIterator(session, cursor.row, cursor.column);\n            var token = iterator.getCurrentToken();\n\n            if (rightChar == quote && (is(token, \"attribute-value\") || is(token, \"string\"))) {\n                return {\n                    text: \"\",\n                    selection: [1, 1]\n                };\n            }\n\n            if (!token)\n                token = iterator.stepBackward();\n\n            if (!token)\n                return;\n\n            while (is(token, \"tag-whitespace\") || is(token, \"whitespace\")) {\n                token = iterator.stepBackward();\n            }\n            var rightSpace = !rightChar || rightChar.match(/\\s/);\n            if (is(token, \"attribute-equals\") && (rightSpace || rightChar == '>') || (is(token, \"decl-attribute-equals\") && (rightSpace || rightChar == '?'))) {\n                return {\n                    text: quote + quote,\n                    selection: [1, 1]\n                };\n            }\n        }\n    });\n\n    this.add(\"string_dquotes\", \"deletion\", function(state, action, editor, session, range) {\n        var selected = session.doc.getTextRange(range);\n        if (!range.isMultiLine() && (selected == '\"' || selected == \"'\")) {\n            var line = session.doc.getLine(range.start.row);\n            var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\n            if (rightChar == selected) {\n                range.end.column++;\n                return range;\n            }\n        }\n    });\n\n    this.add(\"autoclosing\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == '>') {\n            var position = editor.getSelectionRange().start;\n            var iterator = new TokenIterator(session, position.row, position.column);\n            var token = iterator.getCurrentToken() || iterator.stepBackward();\n            if (!token || !(is(token, \"tag-name\") || is(token, \"tag-whitespace\") || is(token, \"attribute-name\") || is(token, \"attribute-equals\") || is(token, \"attribute-value\")))\n                return;\n            if (is(token, \"reference.attribute-value\"))\n                return;\n            if (is(token, \"attribute-value\")) {\n                var firstChar = token.value.charAt(0);\n                if (firstChar == '\"' || firstChar == \"'\") {\n                    var lastChar = token.value.charAt(token.value.length - 1);\n                    var tokenEnd = iterator.getCurrentTokenColumn() + token.value.length;\n                    if (tokenEnd > position.column || tokenEnd == position.column && firstChar != lastChar)\n                        return;\n                }\n            }\n            while (!is(token, \"tag-name\")) {\n                token = iterator.stepBackward();\n                if (token.value == \"<\") {\n                    token = iterator.stepForward();\n                    break;\n                }\n            }\n\n            var tokenRow = iterator.getCurrentTokenRow();\n            var tokenColumn = iterator.getCurrentTokenColumn();\n            if (is(iterator.stepBackward(), \"end-tag-open\"))\n                return;\n\n            var element = token.value;\n            if (tokenRow == position.row)\n                element = element.substring(0, position.column - tokenColumn);\n\n            if (this.voidElements.hasOwnProperty(element.toLowerCase()))\n                 return;\n\n            return {\n               text: \">\" + \"</\" + element + \">\",\n               selection: [1, 1]\n            };\n        }\n    });\n\n    this.add(\"autoindent\", \"insertion\", function (state, action, editor, session, text) {\n        if (text == \"\\n\") {\n            var cursor = editor.getCursorPosition();\n            var line = session.getLine(cursor.row);\n            var iterator = new TokenIterator(session, cursor.row, cursor.column);\n            var token = iterator.getCurrentToken();\n\n            if (token && token.type.indexOf(\"tag-close\") !== -1) {\n                if (token.value == \"/>\")\n                    return;\n                while (token && token.type.indexOf(\"tag-name\") === -1) {\n                    token = iterator.stepBackward();\n                }\n\n                if (!token) {\n                    return;\n                }\n\n                var tag = token.value;\n                var row = iterator.getCurrentTokenRow();\n                token = iterator.stepBackward();\n                if (!token || token.type.indexOf(\"end-tag\") !== -1) {\n                    return;\n                }\n\n                if (this.voidElements && !this.voidElements[tag]) {\n                    var nextToken = session.getTokenAt(cursor.row, cursor.column+1);\n                    var line = session.getLine(row);\n                    var nextIndent = this.$getIndent(line);\n                    var indent = nextIndent + session.getTabString();\n\n                    if (nextToken && nextToken.value === \"</\") {\n                        return {\n                            text: \"\\n\" + indent + \"\\n\" + nextIndent,\n                            selection: [1, indent.length, 1, indent.length]\n                        };\n                    } else {\n                        return {\n                            text: \"\\n\" + indent\n                        };\n                    }\n                }\n            }\n        }\n    });\n\n};\n\noop.inherits(XmlBehaviour, Behaviour);\n\nexports.XmlBehaviour = XmlBehaviour;\n});\n\nace.define(\"ace/mode/folding/xml\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/range\",\"ace/mode/folding/fold_mode\",\"ace/token_iterator\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar lang = acequire(\"../../lib/lang\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar TokenIterator = acequire(\"../../token_iterator\").TokenIterator;\n\nvar FoldMode = exports.FoldMode = function(voidElements, optionalEndTags) {\n    BaseFoldMode.call(this);\n    this.voidElements = voidElements || {};\n    this.optionalEndTags = oop.mixin({}, this.voidElements);\n    if (optionalEndTags)\n        oop.mixin(this.optionalEndTags, optionalEndTags);\n    \n};\noop.inherits(FoldMode, BaseFoldMode);\n\nvar Tag = function() {\n    this.tagName = \"\";\n    this.closing = false;\n    this.selfClosing = false;\n    this.start = {row: 0, column: 0};\n    this.end = {row: 0, column: 0};\n};\n\nfunction is(token, type) {\n    return token.type.lastIndexOf(type + \".xml\") > -1;\n}\n\n(function() {\n\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var tag = this._getFirstTagInLine(session, row);\n\n        if (!tag)\n            return this.getCommentFoldWidget(session, row);\n\n        if (tag.closing || (!tag.tagName && tag.selfClosing))\n            return foldStyle == \"markbeginend\" ? \"end\" : \"\";\n\n        if (!tag.tagName || tag.selfClosing || this.voidElements.hasOwnProperty(tag.tagName.toLowerCase()))\n            return \"\";\n\n        if (this._findEndTagInLine(session, row, tag.tagName, tag.end.column))\n            return \"\";\n\n        return \"start\";\n    };\n\n    this.getCommentFoldWidget = function(session, row) {\n        if (/comment/.test(session.getState(row)) && /<!-/.test(session.getLine(row)))\n            return \"start\";\n        return \"\";\n    };\n    this._getFirstTagInLine = function(session, row) {\n        var tokens = session.getTokens(row);\n        var tag = new Tag();\n\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (is(token, \"tag-open\")) {\n                tag.end.column = tag.start.column + token.value.length;\n                tag.closing = is(token, \"end-tag-open\");\n                token = tokens[++i];\n                if (!token)\n                    return null;\n                tag.tagName = token.value;\n                tag.end.column += token.value.length;\n                for (i++; i < tokens.length; i++) {\n                    token = tokens[i];\n                    tag.end.column += token.value.length;\n                    if (is(token, \"tag-close\")) {\n                        tag.selfClosing = token.value == '/>';\n                        break;\n                    }\n                }\n                return tag;\n            } else if (is(token, \"tag-close\")) {\n                tag.selfClosing = token.value == '/>';\n                return tag;\n            }\n            tag.start.column += token.value.length;\n        }\n\n        return null;\n    };\n\n    this._findEndTagInLine = function(session, row, tagName, startColumn) {\n        var tokens = session.getTokens(row);\n        var column = 0;\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            column += token.value.length;\n            if (column < startColumn)\n                continue;\n            if (is(token, \"end-tag-open\")) {\n                token = tokens[i + 1];\n                if (token && token.value == tagName)\n                    return true;\n            }\n        }\n        return false;\n    };\n    this._readTagForward = function(iterator) {\n        var token = iterator.getCurrentToken();\n        if (!token)\n            return null;\n\n        var tag = new Tag();\n        do {\n            if (is(token, \"tag-open\")) {\n                tag.closing = is(token, \"end-tag-open\");\n                tag.start.row = iterator.getCurrentTokenRow();\n                tag.start.column = iterator.getCurrentTokenColumn();\n            } else if (is(token, \"tag-name\")) {\n                tag.tagName = token.value;\n            } else if (is(token, \"tag-close\")) {\n                tag.selfClosing = token.value == \"/>\";\n                tag.end.row = iterator.getCurrentTokenRow();\n                tag.end.column = iterator.getCurrentTokenColumn() + token.value.length;\n                iterator.stepForward();\n                return tag;\n            }\n        } while(token = iterator.stepForward());\n\n        return null;\n    };\n    \n    this._readTagBackward = function(iterator) {\n        var token = iterator.getCurrentToken();\n        if (!token)\n            return null;\n\n        var tag = new Tag();\n        do {\n            if (is(token, \"tag-open\")) {\n                tag.closing = is(token, \"end-tag-open\");\n                tag.start.row = iterator.getCurrentTokenRow();\n                tag.start.column = iterator.getCurrentTokenColumn();\n                iterator.stepBackward();\n                return tag;\n            } else if (is(token, \"tag-name\")) {\n                tag.tagName = token.value;\n            } else if (is(token, \"tag-close\")) {\n                tag.selfClosing = token.value == \"/>\";\n                tag.end.row = iterator.getCurrentTokenRow();\n                tag.end.column = iterator.getCurrentTokenColumn() + token.value.length;\n            }\n        } while(token = iterator.stepBackward());\n\n        return null;\n    };\n    \n    this._pop = function(stack, tag) {\n        while (stack.length) {\n            \n            var top = stack[stack.length-1];\n            if (!tag || top.tagName == tag.tagName) {\n                return stack.pop();\n            }\n            else if (this.optionalEndTags.hasOwnProperty(top.tagName)) {\n                stack.pop();\n                continue;\n            } else {\n                return null;\n            }\n        }\n    };\n    \n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var firstTag = this._getFirstTagInLine(session, row);\n        \n        if (!firstTag) {\n            return this.getCommentFoldWidget(session, row)\n                && session.getCommentFoldRange(row, session.getLine(row).length);\n        }\n        \n        var isBackward = firstTag.closing || firstTag.selfClosing;\n        var stack = [];\n        var tag;\n        \n        if (!isBackward) {\n            var iterator = new TokenIterator(session, row, firstTag.start.column);\n            var start = {\n                row: row,\n                column: firstTag.start.column + firstTag.tagName.length + 2\n            };\n            if (firstTag.start.row == firstTag.end.row)\n                start.column = firstTag.end.column;\n            while (tag = this._readTagForward(iterator)) {\n                if (tag.selfClosing) {\n                    if (!stack.length) {\n                        tag.start.column += tag.tagName.length + 2;\n                        tag.end.column -= 2;\n                        return Range.fromPoints(tag.start, tag.end);\n                    } else\n                        continue;\n                }\n                \n                if (tag.closing) {\n                    this._pop(stack, tag);\n                    if (stack.length == 0)\n                        return Range.fromPoints(start, tag.start);\n                }\n                else {\n                    stack.push(tag);\n                }\n            }\n        }\n        else {\n            var iterator = new TokenIterator(session, row, firstTag.end.column);\n            var end = {\n                row: row,\n                column: firstTag.start.column\n            };\n            \n            while (tag = this._readTagBackward(iterator)) {\n                if (tag.selfClosing) {\n                    if (!stack.length) {\n                        tag.start.column += tag.tagName.length + 2;\n                        tag.end.column -= 2;\n                        return Range.fromPoints(tag.start, tag.end);\n                    } else\n                        continue;\n                }\n                \n                if (!tag.closing) {\n                    this._pop(stack, tag);\n                    if (stack.length == 0) {\n                        tag.start.column += tag.tagName.length + 2;\n                        if (tag.start.row == tag.end.row && tag.start.column < tag.end.column)\n                            tag.start.column = tag.end.column;\n                        return Range.fromPoints(tag.start, end);\n                    }\n                }\n                else {\n                    stack.push(tag);\n                }\n            }\n        }\n        \n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/xml\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text\",\"ace/mode/xml_highlight_rules\",\"ace/mode/behaviour/xml\",\"ace/mode/folding/xml\",\"ace/worker/worker_client\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar TextMode = acequire(\"./text\").Mode;\nvar XmlHighlightRules = acequire(\"./xml_highlight_rules\").XmlHighlightRules;\nvar XmlBehaviour = acequire(\"./behaviour/xml\").XmlBehaviour;\nvar XmlFoldMode = acequire(\"./folding/xml\").FoldMode;\nvar WorkerClient = acequire(\"../worker/worker_client\").WorkerClient;\n\nvar Mode = function() {\n   this.HighlightRules = XmlHighlightRules;\n   this.$behaviour = new XmlBehaviour();\n   this.foldingRules = new XmlFoldMode();\n};\n\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.voidElements = lang.arrayToMap([]);\n\n    this.blockComment = {start: \"<!--\", end: \"-->\"};\n\n    this.createWorker = function(session) {\n        var worker = new WorkerClient([\"ace\"], require(\"../worker/xml\"), \"Worker\");\n        worker.attachToDocument(session.getDocument());\n\n        worker.on(\"error\", function(e) {\n            session.setAnnotations(e.data);\n        });\n\n        worker.on(\"terminate\", function() {\n            session.clearAnnotations();\n        });\n\n        return worker;\n    };\n    \n    this.$id = \"ace/mode/xml\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}