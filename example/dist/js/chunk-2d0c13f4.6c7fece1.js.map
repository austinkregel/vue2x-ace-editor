{"version":3,"sources":["webpack:///./node_modules/brace/mode/haskell_cabal.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","CabalHighlightRules","this","$rules","start","token","regex","inherits","BaseFoldMode","FoldMode","Range","isHeading","session","row","heading","getTokens","type","lastIndexOf","getFoldWidget","foldStyle","test","getLine","maxRow","getLength","getFoldWidgetRange","line","startColumn","length","startRow","endRow","endColumn","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"mGAAAA,IAAAC,OAAA,+HAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAI,EAAAJ,EAAA,0BAAAI,mBAEAC,EAAA,WACAC,KAAAC,OAAA,CACAC,MAAA,CACA,CACAC,MAAA,UACAC,MAAA,cACa,CACbD,MAAA,YACAC,MAAA,2BACa,CACbD,MAAA,mBACAC,MAAA,2BACa,CACbD,MAAA,4BACAC,MAAA,kDACa,CACbD,MAAA,iBACAC,MAAA,eAMAP,EAAAQ,SAAAN,EAAAD,GAEAH,EAAAI,wBAGAP,IAAAC,OAAA,gIAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,iBACAY,EAAAZ,EAAA,eAAAa,SACAC,EAAAd,EAAA,eAAAc,MAEAD,EAAAZ,EAAAY,SAAA,aACAV,EAAAQ,SAAAE,EAAAD,GAEA,WACAN,KAAAS,UAAA,SAAAC,EAAAC,GACA,IAAAC,EAAA,iBACAT,EAAAO,EAAAG,UAAAF,GAAA,GACA,UAAAA,GAAAR,GAAA,IAAAA,EAAAW,KAAAC,YAAAH,EAAA,IAGAZ,KAAAgB,cAAA,SAAAN,EAAAO,EAAAN,GACA,GAAAX,KAAAS,UAAAC,EAAAC,GACA,cACO,oBAAAM,IAAA,QAAAC,KAAAR,EAAAS,QAAAR,IAAA,CACP,IAAAS,EAAAV,EAAAW,YACA,QAAAV,EAAAS,EACA,YAAAF,KAAAR,EAAAS,QAAAR,IACA,MAGA,GAAAA,GAAAS,GAAApB,KAAAS,UAAAC,EAAAC,GACA,YAGA,UAIAX,KAAAsB,mBAAA,SAAAZ,EAAAO,EAAAN,GACA,IAAAY,EAAAb,EAAAS,QAAAR,GACAa,EAAAD,EAAAE,OACAL,EAAAV,EAAAW,YACAK,EAAAf,EACAgB,EAAAhB,EACA,GAAAX,KAAAS,UAAAC,EAAAC,GAAA,CACA,QAAAA,EAAAS,EACA,GAAApB,KAAAS,UAAAC,EAAAC,GAAA,CACAA,IACA,MAKA,GADAgB,EAAAhB,EACAgB,EAAAD,EACA,MAAAC,EAAAD,GAAA,QAAAR,KAAAR,EAAAS,QAAAQ,IACAA,IAGA,GAAAA,EAAAD,EAAA,CACA,IAAAE,EAAAlB,EAAAS,QAAAQ,GAAAF,OACA,WAAAjB,EAAAkB,EAAAF,EAAAG,EAAAC,SAEO,WAAA5B,KAAAgB,cAAAN,EAAAO,EAAAN,GAAA,CACPgB,EAAAhB,EACAiB,EAAAlB,EAAAS,QAAAQ,GAAAF,OACA,QAAAd,GAAA,EACA,GAAAX,KAAAS,UAAAC,EAAAC,GACA,MAGAY,EAAAb,EAAAS,QAAAR,GACAa,EAAAD,EAAAE,OACA,WAAAjB,EAAAG,EAAAa,EAAAG,EAAAC,MAICC,KAAAtB,EAAAuB,aAIDtC,IAAAC,OAAA,yKAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAqC,EAAArC,EAAA,UAAAsC,KACAjC,EAAAL,EAAA,mCAAAK,oBACAQ,EAAAb,EAAA,2BAAAa,SAEAyB,EAAA,WACAhC,KAAAiC,eAAAlC,EACAC,KAAAkC,aAAA,IAAA3B,EACAP,KAAAmC,WAAAnC,KAAAoC,mBAEAvC,EAAAQ,SAAA2B,EAAAD,GAEA,WACA/B,KAAAqC,iBAAA,KACArC,KAAAsC,aAAA,KACAtC,KAAAuC,IAAA,0BACCV,KAAAG,EAAAF,WAEDnC,EAAAqC","file":"js/chunk-2d0c13f4.6c7fece1.js","sourcesContent":["ace.define(\"ace/mode/haskell_cabal_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar CabalHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"^\\\\s*--.*$\"\n            }, {\n                token: [\"keyword\"],\n                regex: /^(\\s*\\w.*?)(:(?:\\s+|$))/\n            }, {\n                token : \"constant.numeric\", // float\n                regex : /[\\d_]+(?:(?:[\\.\\d_]*)?)/\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false|TRUE|FALSE|True|False|yes|no)\\\\b\"\n            }, {\n                token : \"markup.heading\",\n                regex : /^(\\w.*)$/\n            }\n        ]};\n\n};\n\noop.inherits(CabalHighlightRules, TextHighlightRules);\n\nexports.CabalHighlightRules = CabalHighlightRules;\n});\n\nace.define(\"ace/mode/folding/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n  this.isHeading = function (session,row) {\n      var heading = \"markup.heading\";\n      var token = session.getTokens(row)[0];\n      return row==0 || (token && token.type.lastIndexOf(heading, 0) === 0);\n  };\n\n  this.getFoldWidget = function(session, foldStyle, row) {\n      if (this.isHeading(session,row)){\n        return \"start\";\n      } else if (foldStyle === \"markbeginend\" && !(/^\\s*$/.test(session.getLine(row)))){\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n          if (!(/^\\s*$/.test(session.getLine(row)))){\n              break;\n          }\n        }\n        if (row==maxRow || this.isHeading(session,row)){\n          return \"end\";\n        }\n      }\n      return \"\";\n  };\n\n\n  this.getFoldWidgetRange = function(session, foldStyle, row) {\n      var line = session.getLine(row);\n      var startColumn = line.length;\n      var maxRow = session.getLength();\n      var startRow = row;\n      var endRow = row;\n      if (this.isHeading(session,row)) {\n          while (++row < maxRow) {\n              if (this.isHeading(session,row)){\n                row--;\n                break;\n              }\n          }\n\n          endRow = row;\n          if (endRow > startRow) {\n              while (endRow > startRow && /^\\s*$/.test(session.getLine(endRow)))\n                  endRow--;\n          }\n\n          if (endRow > startRow) {\n              var endColumn = session.getLine(endRow).length;\n              return new Range(startRow, startColumn, endRow, endColumn);\n          }\n      } else if (this.getFoldWidget(session, foldStyle, row)===\"end\"){\n        var endRow = row;\n        var endColumn = session.getLine(endRow).length;\n        while (--row>=0){\n          if (this.isHeading(session,row)){\n            break;\n          }\n        }\n        var line = session.getLine(row);\n        var startColumn = line.length;\n        return new Range(row, startColumn, endRow, endColumn);\n      }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/haskell_cabal\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/haskell_cabal_highlight_rules\",\"ace/mode/folding/haskell_cabal\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar CabalHighlightRules = acequire(\"./haskell_cabal_highlight_rules\").CabalHighlightRules;\nvar FoldMode = acequire(\"./folding/haskell_cabal\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CabalHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.blockComment = null;\n    this.$id = \"ace/mode/haskell_cabal\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}