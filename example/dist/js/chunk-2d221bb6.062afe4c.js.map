{"version":3,"sources":["webpack:///./node_modules/brace/mode/c9search.js"],"names":["ace","define","acequire","exports","module","oop","lang","TextHighlightRules","safeCreateRegexp","source","flag","RegExp","e","C9SearchHighlightRules","this","$rules","start","tokenNames","regex","onMatch","val","state","stack","values","splitRegex","exec","types","tokens","type","value","push","m","str","last","lastIndex","skipped","substring","index","length","substr","options","search","parts","split","i","test","escapeRegExp","token","next","numbers","normalizeRules","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","foldingStartMarker","foldingStopMarker","getFoldWidgetRange","session","foldStyle","lines","getAllLines","level1","level2","re","startRow","endRow","l","getLength","col","TextMode","Mode","C9StyleFoldMode","HighlightRules","$outdent","foldingRules","getNextLineIndent","tab","$id"],"mappings":"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","file":"js/chunk-2d221bb6.062afe4c.js","sourcesContent":["ace.define(\"ace/mode/c9search_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/lib/lang\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar lang = acequire(\"../lib/lang\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nfunction safeCreateRegexp(source, flag) {\n    try {\n        return new RegExp(source, flag);\n    } catch(e) {}\n}\n\nvar C9SearchHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                tokenNames : [\"c9searchresults.constant.numeric\", \"c9searchresults.text\", \"c9searchresults.text\", \"c9searchresults.keyword\"],\n                regex : /(^\\s+[0-9]+)(:)(\\d*\\s?)([^\\r\\n]+)/,\n                onMatch : function(val, state, stack) {\n                    var values = this.splitRegex.exec(val);\n                    var types = this.tokenNames;\n                    var tokens = [{\n                        type: types[0],\n                        value: values[1]\n                    }, {\n                        type: types[1],\n                        value: values[2]\n                    }];\n                    \n                    if (values[3]) {\n                        if (values[3] == \" \")\n                            tokens[1] = { type: types[1], value: values[2] + \" \" };\n                        else\n                            tokens.push({ type: types[1], value: values[3] });\n                    }\n                    var regex = stack[1];\n                    var str = values[4];\n                    \n                    var m;\n                    var last = 0;\n                    if (regex && regex.exec) {\n                        regex.lastIndex = 0;\n                        while (m = regex.exec(str)) {\n                            var skipped = str.substring(last, m.index);\n                            last = regex.lastIndex;\n                            if (skipped)\n                                tokens.push({type: types[2], value: skipped});\n                            if (m[0])\n                                tokens.push({type: types[3], value: m[0]});\n                            else if (!skipped)\n                                break;\n                        }\n                    }\n                    if (last < str.length)\n                        tokens.push({type: types[2], value: str.substr(last)});\n                    return tokens;\n                }\n            },\n            {\n                regex : \"^Searching for [^\\\\r\\\\n]*$\",\n                onMatch: function(val, state, stack) {\n                    var parts = val.split(\"\\x01\");\n                    if (parts.length < 3)\n                        return \"text\";\n\n                    var options, search, replace;\n                    \n                    var i = 0;\n                    var tokens = [{\n                        value: parts[i++] + \"'\",\n                        type: \"text\"\n                    }, {\n                        value: search = parts[i++],\n                        type: \"text\" // \"c9searchresults.keyword\"\n                    }, {\n                        value: \"'\" + parts[i++],\n                        type: \"text\"\n                    }];\n                    if (parts[2] !== \" in\") {\n                        replace = parts[i];\n                        tokens.push({\n                            value: \"'\" + parts[i++] + \"'\",\n                            type: \"text\"\n                        }, {\n                            value: parts[i++],\n                            type: \"text\"\n                        });\n                    }\n                    tokens.push({\n                        value: \" \" + parts[i++] + \" \",\n                        type: \"text\"\n                    });\n                    if (parts[i+1]) {\n                        options = parts[i+1];\n                        tokens.push({\n                            value: \"(\" + parts[i+1] + \")\",\n                            type: \"text\"\n                        });\n                        i += 1;\n                    } else {\n                        i -= 1;\n                    }\n                    while (i++ < parts.length) {\n                        parts[i] && tokens.push({\n                            value: parts[i],\n                            type: \"text\"\n                        });\n                    }\n                    \n                    if (search) {\n                        if (!/regex/.test(options))\n                            search = lang.escapeRegExp(search);\n                        if (/whole/.test(options))\n                            search = \"\\\\b\" + search + \"\\\\b\";\n                    }\n                    \n                    var regex = search && safeCreateRegexp(\n                        \"(\" + search + \")\",\n                        / sensitive/.test(options) ? \"g\" : \"ig\"\n                    );\n                    if (regex) {\n                        stack[0] = state;\n                        stack[1] = regex;\n                    }\n                    \n                    return tokens;\n                }\n            },\n            {\n                regex : \"^(?=Found \\\\d+ matches)\",\n                token : \"text\",\n                next : \"numbers\"\n            },\n            {\n                token : \"string\", // single line\n                regex : \"^\\\\S:?[^:]+\",\n                next : \"numbers\"\n            }\n        ],\n        numbers:[{\n            regex : \"\\\\d+\",\n            token : \"constant.numeric\"\n        }, {\n            regex : \"$\",\n            token : \"text\",\n            next : \"start\"\n        }]\n    };\n    this.normalizeRules();\n};\n\noop.inherits(C9SearchHighlightRules, TextHighlightRules);\n\nexports.C9SearchHighlightRules = C9SearchHighlightRules;\n\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.foldingStartMarker = /^(\\S.*:|Searching for.*)$/;\n    this.foldingStopMarker = /^(\\s+|Found.*)$/;\n    \n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var lines = session.doc.getAllLines(row);\n        var line = lines[row];\n        var level1 = /^(Found.*|Searching for.*)$/;\n        var level2 = /^(\\S.*:|\\s*)$/;\n        var re = level1.test(line) ? level1 : level2;\n        \n        var startRow = row;\n        var endRow = row;\n\n        if (this.foldingStartMarker.test(line)) {\n            for (var i = row + 1, l = session.getLength(); i < l; i++) {\n                if (re.test(lines[i]))\n                    break;\n            }\n            endRow = i;\n        }\n        else if (this.foldingStopMarker.test(line)) {\n            for (var i = row - 1; i >= 0; i--) {\n                line = lines[i];\n                if (re.test(line))\n                    break;\n            }\n            startRow = i;\n        }\n        if (startRow != endRow) {\n            var col = line.length;\n            if (re === level1)\n                col = line.search(/\\(Found[^)]+\\)$|$/);\n            return new Range(startRow, col, endRow, 0);\n        }\n    };\n    \n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/c9search\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/c9search_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/folding/c9search\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar C9SearchHighlightRules = acequire(\"./c9search_highlight_rules\").C9SearchHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar C9StyleFoldMode = acequire(\"./folding/c9search\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = C9SearchHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new C9StyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/c9search\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n\n});\n"],"sourceRoot":""}