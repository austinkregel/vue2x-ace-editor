{"version":3,"sources":["webpack:///./node_modules/brace/mode/csharp.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","CSharpHighlightRules","keywordMapper","createKeywordMapper","variable.language","keyword","constant.language","end","comment","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","CFoldMode","usingRe","getFoldWidgetRangeBase","getFoldWidgetBase","prev","getUsingStatementBlock","getRegionBlock","endColumn","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","$behaviour","foldingRules","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","type","createWorker","$id"],"mappings":"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","file":"js/chunk-2d0b1605.71426ba8.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/csharp_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar CSharpHighlightRules = function() {\n    var keywordMapper = this.createKeywordMapper({\n        \"variable.language\": \"this\",\n        \"keyword\": \"abstract|event|new|struct|as|explicit|null|switch|base|extern|object|this|bool|false|operator|throw|break|finally|out|true|byte|fixed|override|try|case|float|params|typeof|catch|for|private|uint|char|foreach|protected|ulong|checked|goto|public|unchecked|class|if|readonly|unsafe|const|implicit|ref|ushort|continue|in|return|using|decimal|int|sbyte|virtual|default|interface|sealed|volatile|delegate|internal|partial|short|void|do|is|sizeof|while|double|lock|stackalloc|else|long|static|enum|namespace|string|var|dynamic\",\n        \"constant.language\": \"null|true|false\"\n    }, \"identifier\");\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"comment\"\n            }, {\n                token : \"string\", // character\n                regex : /'(?:.|\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n]))?'/\n            }, {\n                token : \"string\", start : '\"', end : '\"|$', next: [\n                    {token: \"constant.language.escape\", regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},\n                    {token: \"invalid\", regex: /\\\\./}\n                ]\n            }, {\n                token : \"string\", start : '@\"', end : '\"', next:[\n                    {token: \"constant.language.escape\", regex: '\"\"'}\n                ]\n            }, {\n                token : \"string\", start : /\\$\"/, end : '\"|$', next: [\n                    {token: \"constant.language.escape\", regex: /\\\\(:?$)|{{/},\n                    {token: \"constant.language.escape\", regex: /\\\\(:?u[\\da-fA-F]+|x[\\da-fA-F]+|[tbrf'\"n])/},\n                    {token: \"invalid\", regex: /\\\\./}\n                ]\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|===|==|=|!=|!==|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=|\\\\b(?:in|instanceof|new|delete|typeof|void)\"\n            }, {\n                token : \"keyword\",\n                regex : \"^\\\\s*#(if|else|elif|endif|define|undef|warning|error|line|region|endregion|pragma)\"\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken : \"comment\"\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    this.normalizeRules();\n};\n\noop.inherits(CSharpHighlightRules, TextHighlightRules);\n\nexports.CSharpHighlightRules = CSharpHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/folding/csharp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar CFoldMode = acequire(\"./cstyle\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, CFoldMode);\n\n(function() {\n    this.usingRe = /^\\s*using \\S/;\n\n    this.getFoldWidgetRangeBase = this.getFoldWidgetRange;\n    this.getFoldWidgetBase = this.getFoldWidget;\n    \n    this.getFoldWidget = function(session, foldStyle, row) {\n        var fw = this.getFoldWidgetBase(session, foldStyle, row);\n        if (!fw) {\n            var line = session.getLine(row);\n            if (/^\\s*#region\\b/.test(line)) \n                return \"start\";\n            var usingRe = this.usingRe;\n            if (usingRe.test(line)) {\n                var prev = session.getLine(row - 1);\n                var next = session.getLine(row + 1);\n                if (!usingRe.test(prev) && usingRe.test(next))\n                    return \"start\";\n            }\n        }\n        return fw;\n    };\n    \n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.getFoldWidgetRangeBase(session, foldStyle, row);\n        if (range)\n            return range;\n\n        var line = session.getLine(row);\n        if (this.usingRe.test(line))\n            return this.getUsingStatementBlock(session, line, row);\n            \n        if (/^\\s*#region\\b/.test(line))\n            return this.getRegionBlock(session, line, row);\n    };\n    \n    this.getUsingStatementBlock = function(session, line, row) {\n        var startColumn = line.match(this.usingRe)[0].length - 1;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            if (/^\\s*$/.test(line))\n                continue;\n            if (!this.usingRe.test(line))\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    \n    this.getRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*#(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m)\n                continue;\n            if (m[1])\n                depth--;\n            else\n                depth++;\n\n            if (!depth)\n                break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/csharp\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/csharp_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/csharp\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar CSharpHighlightRules = acequire(\"./csharp_highlight_rules\").CSharpHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/csharp\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CSharpHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    \n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    \n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n  \n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n  \n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n    \n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n  \n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n  \n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n\n    this.createWorker = function(session) {\n        return null;\n    };\n\n    this.$id = \"ace/mode/csharp\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}