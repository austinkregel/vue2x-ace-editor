{"version":3,"sources":["webpack:///./node_modules/brace/mode/livescript.js"],"names":["ace","define","acequire","exports","module","Range","MatchingBraceOutdent","this","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","identifier","LiveScriptMode","keywordend","stringfill","extend$","sub","sup","fun","superclass","constructor","extended","import$","obj","src","own","hasOwnProperty","key","Mode","indenter","displayName","that","$tokenizer","Tokenizer","Rules","$outdent","$id","RegExp","getNextLineIndent","state","tab","tokens","getLineTokens","type","lineCommentStart","blockComment","start","end","ref$","defaultToken","token","regex","next","heregex","comment","qdoc","qqdoc","qstring","qqstring","js","words"],"mappings":"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,MAAA,OACAC,KAAA,SACO,CACPF,MAAA,eACAC,MAAA,KACAC,KAAA,WACO,CACPF,MAAA,cACAC,MAAA,OACAC,KAAA,WACO,CACPF,MAAA,UACAC,MAAA,OACO,CACPD,MAAA,eACAC,MAAA,kHACAC,KAAA,OACO,CACPF,MAAA,mBACAC,MAAA,+JACO,CACPD,MAAA,SACAC,MAAA,SACO,CACPD,MAAA,SACAC,MAAA,UACAC,KAAA,OACO,CACPF,MAAA,mBACAC,MAAA,kBACO,CACPD,MAAA,OACAC,MAAA,SAGAE,QAAA,CACA,CACAH,MAAA,eACAC,MAAA,qBACAC,KAAA,SACO,CACPF,MAAA,eACAC,MAAA,UACO,CACPD,MAAA,gBACAC,MAAA,gBACO,CACPF,aAAA,iBAGAtB,IAAA,CACA,CACAuB,MAAA,mBACAC,MAAA,WACO,CACPD,MAAA,aACAC,MAAAxC,EACAyC,KAAA,SACO,CACPF,MAAA,OACAC,MAAA,GACAC,KAAA,UAGAE,QAAA,CACA,CACAJ,MAAA,cACAC,MAAA,UACAC,KAAA,SACO,CACPH,aAAA,gBAGAM,KAAA,CACA,CACAL,MAAA,SACAC,MAAA,SACAC,KAAA,OACOtC,GAEP0C,MAAA,CACA,CACAN,MAAA,SACAC,MAAA,SACAC,KAAA,OACOtC,GAEP2C,QAAA,CACA,CACAP,MAAA,SACAC,MAAA,gCACAC,KAAA,OACOtC,GAEP4C,SAAA,CACA,CACAR,MAAA,SACAC,MAAA,gCACAC,KAAA,OACOtC,GAEP6C,GAAA,CACA,CACAT,MAAA,SACAC,MAAA,gCACAC,KAAA,OACOtC,GAEP8C,MAAA,CACA,CACAV,MAAA,SACAC,MAAA,UACAC,KAAA,OACOtC","file":"js/chunk-2d0bd199.fb068e42.js","sourcesContent":["ace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/livescript\",[\"require\",\"exports\",\"module\",\"ace/tokenizer\",\"ace/mode/matching_brace_outdent\",\"ace/mode/text\"], function(acequire, exports, module){\n  var identifier, LiveScriptMode, keywordend, stringfill;\n  identifier = '(?![\\\\d\\\\s])[$\\\\w\\\\xAA-\\\\uFFDC](?:(?!\\\\s)[$\\\\w\\\\xAA-\\\\uFFDC]|-[A-Za-z])*';\n  exports.Mode = LiveScriptMode = (function(superclass){\n    var indenter, prototype = extend$((import$(LiveScriptMode, superclass).displayName = 'LiveScriptMode', LiveScriptMode), superclass).prototype, constructor = LiveScriptMode;\n    function LiveScriptMode(){\n      var that;\n      this.$tokenizer = new (acequire('../tokenizer')).Tokenizer(LiveScriptMode.Rules);\n      if (that = acequire('../mode/matching_brace_outdent')) {\n        this.$outdent = new that.MatchingBraceOutdent;\n      }\n      this.$id = \"ace/mode/livescript\";\n    }\n    indenter = RegExp('(?:[({[=:]|[-~]>|\\\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\\\s*all)?|const|var|let|new|catch(?:\\\\s*' + identifier + ')?))\\\\s*$');\n    prototype.getNextLineIndent = function(state, line, tab){\n      var indent, tokens;\n      indent = this.$getIndent(line);\n      tokens = this.$tokenizer.getLineTokens(line, state).tokens;\n      if (!(tokens.length && tokens[tokens.length - 1].type === 'comment')) {\n        if (state === 'start' && indenter.test(line)) {\n          indent += tab;\n        }\n      }\n      return indent;\n    };\n    prototype.lineCommentStart = \"#\";\n    prototype.blockComment = {start: \"###\", end: \"###\"};\n    prototype.checkOutdent = function(state, line, input){\n      var ref$;\n      return (ref$ = this.$outdent) != null ? ref$.checkOutdent(line, input) : void 8;\n    };\n    prototype.autoOutdent = function(state, doc, row){\n      var ref$;\n      return (ref$ = this.$outdent) != null ? ref$.autoOutdent(doc, row) : void 8;\n    };\n    return LiveScriptMode;\n  }(acequire('../mode/text').Mode));\n  keywordend = '(?![$\\\\w]|-[A-Za-z]|\\\\s*:(?![:=]))';\n  stringfill = {\n    defaultToken: 'string'\n  };\n  LiveScriptMode.Rules = {\n    start: [\n      {\n        token: 'keyword',\n        regex: '(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)' + keywordend\n      }, {\n        token: 'constant.language',\n        regex: '(?:true|false|yes|no|on|off|null|void|undefined)' + keywordend\n      }, {\n        token: 'invalid.illegal',\n        regex: '(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)' + keywordend\n      }, {\n        token: 'language.support.class',\n        regex: '(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)' + keywordend\n      }, {\n        token: 'language.support.function',\n        regex: '(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)' + keywordend\n      }, {\n        token: 'variable.language',\n        regex: '(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)' + keywordend\n      }, {\n        token: 'identifier',\n        regex: identifier + '\\\\s*:(?![:=])'\n      }, {\n        token: 'variable',\n        regex: identifier\n      }, {\n        token: 'keyword.operator',\n        regex: '(?:\\\\.{3}|\\\\s+\\\\?)'\n      }, {\n        token: 'keyword.variable',\n        regex: '(?:@+|::|\\\\.\\\\.)',\n        next: 'key'\n      }, {\n        token: 'keyword.operator',\n        regex: '\\\\.\\\\s*',\n        next: 'key'\n      }, {\n        token: 'string',\n        regex: '\\\\\\\\\\\\S[^\\\\s,;)}\\\\]]*'\n      }, {\n        token: 'string.doc',\n        regex: '\\'\\'\\'',\n        next: 'qdoc'\n      }, {\n        token: 'string.doc',\n        regex: '\"\"\"',\n        next: 'qqdoc'\n      }, {\n        token: 'string',\n        regex: '\\'',\n        next: 'qstring'\n      }, {\n        token: 'string',\n        regex: '\"',\n        next: 'qqstring'\n      }, {\n        token: 'string',\n        regex: '`',\n        next: 'js'\n      }, {\n        token: 'string',\n        regex: '<\\\\[',\n        next: 'words'\n      }, {\n        token: 'string.regex',\n        regex: '//',\n        next: 'heregex'\n      }, {\n        token: 'comment.doc',\n        regex: '/\\\\*',\n        next: 'comment'\n      }, {\n        token: 'comment',\n        regex: '#.*'\n      }, {\n        token: 'string.regex',\n        regex: '\\\\/(?:[^[\\\\/\\\\n\\\\\\\\]*(?:(?:\\\\\\\\.|\\\\[[^\\\\]\\\\n\\\\\\\\]*(?:\\\\\\\\.[^\\\\]\\\\n\\\\\\\\]*)*\\\\])[^[\\\\/\\\\n\\\\\\\\]*)*)\\\\/[gimy$]{0,4}',\n        next: 'key'\n      }, {\n        token: 'constant.numeric',\n        regex: '(?:0x[\\\\da-fA-F][\\\\da-fA-F_]*|(?:[2-9]|[12]\\\\d|3[0-6])r[\\\\da-zA-Z][\\\\da-zA-Z_]*|(?:\\\\d[\\\\d_]*(?:\\\\.\\\\d[\\\\d_]*)?|\\\\.\\\\d[\\\\d_]*)(?:e[+-]?\\\\d[\\\\d_]*)?[\\\\w$]*)'\n      }, {\n        token: 'lparen',\n        regex: '[({[]'\n      }, {\n        token: 'rparen',\n        regex: '[)}\\\\]]',\n        next: 'key'\n      }, {\n        token: 'keyword.operator',\n        regex: '[\\\\^!|&%+\\\\-]+'\n      }, {\n        token: 'text',\n        regex: '\\\\s+'\n      }\n    ],\n    heregex: [\n      {\n        token: 'string.regex',\n        regex: '.*?//[gimy$?]{0,4}',\n        next: 'start'\n      }, {\n        token: 'string.regex',\n        regex: '\\\\s*#{'\n      }, {\n        token: 'comment.regex',\n        regex: '\\\\s+(?:#.*)?'\n      }, {\n        defaultToken: 'string.regex'\n      }\n    ],\n    key: [\n      {\n        token: 'keyword.operator',\n        regex: '[.?@!]+'\n      }, {\n        token: 'identifier',\n        regex: identifier,\n        next: 'start'\n      }, {\n        token: 'text',\n        regex: '',\n        next: 'start'\n      }\n    ],\n    comment: [\n      {\n        token: 'comment.doc',\n        regex: '.*?\\\\*/',\n        next: 'start'\n      }, {\n        defaultToken: 'comment.doc'\n      }\n    ],\n    qdoc: [\n      {\n        token: 'string',\n        regex: \".*?'''\",\n        next: 'key'\n      }, stringfill\n    ],\n    qqdoc: [\n      {\n        token: 'string',\n        regex: '.*?\"\"\"',\n        next: 'key'\n      }, stringfill\n    ],\n    qstring: [\n      {\n        token: 'string',\n        regex: '[^\\\\\\\\\\']*(?:\\\\\\\\.[^\\\\\\\\\\']*)*\\'',\n        next: 'key'\n      }, stringfill\n    ],\n    qqstring: [\n      {\n        token: 'string',\n        regex: '[^\\\\\\\\\"]*(?:\\\\\\\\.[^\\\\\\\\\"]*)*\"',\n        next: 'key'\n      }, stringfill\n    ],\n    js: [\n      {\n        token: 'string',\n        regex: '[^\\\\\\\\`]*(?:\\\\\\\\.[^\\\\\\\\`]*)*`',\n        next: 'key'\n      }, stringfill\n    ],\n    words: [\n      {\n        token: 'string',\n        regex: '.*?\\\\]>',\n        next: 'key'\n      }, stringfill\n    ]\n  };\nfunction extend$(sub, sup){\n  function fun(){} fun.prototype = (sub.superclass = sup).prototype;\n  (sub.prototype = new fun).constructor = sub;\n  if (typeof sup.extended == 'function') sup.extended(sub);\n  return sub;\n}\nfunction import$(obj, src){\n  var own = {}.hasOwnProperty;\n  for (var key in src) if (own.call(src, key)) obj[key] = src[key];\n  return obj;\n}\n});\n"],"sourceRoot":""}