{"version":3,"sources":["webpack:///./node_modules/brace/mode/golang.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","GolangHighlightRules","keywords","builtinTypes","builtinFunctions","builtinConstants","keywordMapper","createKeywordMapper","keyword","constant.language","support.function","support.type","stringEscapeRe","replace","val","length","type","slice","value","comment","bqstring","embedRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","openBracePos","findMatchingBracket","indent","$getIndent","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","CstyleBehaviour","CStyleFoldMode","HighlightRules","$outdent","foldingRules","$behaviour","lineCommentStart","blockComment","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","$id"],"mappings":"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","file":"js/chunk-2d0b9855.ec7d758f.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/golang_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n    var oop = acequire(\"../lib/oop\");\n    var DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\n    var TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\n    var GolangHighlightRules = function() {\n        var keywords = (\n            \"else|break|case|return|goto|if|const|select|\" +\n            \"continue|struct|default|switch|for|range|\" +\n            \"func|import|package|chan|defer|fallthrough|go|interface|map|range|\" +\n            \"select|type|var\"\n        );\n        var builtinTypes = (\n            \"string|uint8|uint16|uint32|uint64|int8|int16|int32|int64|float32|\" +\n            \"float64|complex64|complex128|byte|rune|uint|int|uintptr|bool|error\"\n        );\n        var builtinFunctions = (\n            \"new|close|cap|copy|panic|panicln|print|println|len|make|delete|real|recover|imag|append\"\n        );\n        var builtinConstants = (\"nil|true|false|iota\");\n\n        var keywordMapper = this.createKeywordMapper({\n            \"keyword\": keywords,\n            \"constant.language\": builtinConstants,\n            \"support.function\": builtinFunctions,\n            \"support.type\": builtinTypes\n        }, \"\");\n        \n        var stringEscapeRe = \"\\\\\\\\(?:[0-7]{3}|x\\\\h{2}|u{4}|U\\\\h{6}|[abfnrtv'\\\"\\\\\\\\])\".replace(/\\\\h/g, \"[a-fA-F\\\\d]\");\n\n        this.$rules = {\n            \"start\" : [\n                {\n                    token : \"comment\",\n                    regex : \"\\\\/\\\\/.*$\"\n                },\n                DocCommentHighlightRules.getStartRule(\"doc-start\"),\n                {\n                    token : \"comment.start\", // multi line comment\n                    regex : \"\\\\/\\\\*\",\n                    next : \"comment\"\n                }, {\n                    token : \"string\", // single line\n                    regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\n                }, {\n                    token : \"string\", // raw\n                    regex : '`',\n                    next : \"bqstring\"\n                }, {\n                    token : \"constant.numeric\", // rune\n                    regex : \"'(?:[^\\\\'\\uD800-\\uDBFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|\" + stringEscapeRe.replace('\"', '')  + \")'\"\n                }, {\n                    token : \"constant.numeric\", // hex\n                    regex : \"0[xX][0-9a-fA-F]+\\\\b\" \n                }, {\n                    token : \"constant.numeric\", // float\n                    regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\n                }, {\n                    token : [\"keyword\", \"text\", \"entity.name.function\"],\n                    regex : \"(func)(\\\\s+)([a-zA-Z_$][a-zA-Z0-9_$]*)\\\\b\"\n                }, {\n                    token : function(val) {\n                        if (val[val.length - 1] == \"(\") {\n                            return [{\n                                type: keywordMapper(val.slice(0, -1)) || \"support.function\",\n                                value: val.slice(0, -1)\n                            }, {\n                                type: \"paren.lparen\",\n                                value: val.slice(-1)\n                            }];\n                        }\n                        \n                        return keywordMapper(val) || \"identifier\";\n                    },\n                    regex : \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\\\\(?\"\n                }, {\n                    token : \"keyword.operator\",\n                    regex : \"!|\\\\$|%|&|\\\\*|\\\\-\\\\-|\\\\-|\\\\+\\\\+|\\\\+|~|==|=|!=|<=|>=|<<=|>>=|>>>=|<>|<|>|!|&&|\\\\|\\\\||\\\\?\\\\:|\\\\*=|%=|\\\\+=|\\\\-=|&=|\\\\^=\"\n                }, {\n                    token : \"punctuation.operator\",\n                    regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n                }, {\n                    token : \"paren.lparen\",\n                    regex : \"[[({]\"\n                }, {\n                    token : \"paren.rparen\",\n                    regex : \"[\\\\])}]\"\n                }, {\n                    token : \"text\",\n                    regex : \"\\\\s+\"\n                }\n            ],\n            \"comment\" : [\n                {\n                    token : \"comment.end\",\n                    regex : \"\\\\*\\\\/\",\n                    next : \"start\"\n                }, {\n                    defaultToken : \"comment\"\n                }\n            ],\n            \"bqstring\" : [\n                {\n                    token : \"string\",\n                    regex : '`',\n                    next : \"start\"\n                }, {\n                    defaultToken : \"string\"\n                }\n            ]\n        };\n\n        this.embedRules(DocCommentHighlightRules, \"doc-\",\n            [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    };\n    oop.inherits(GolangHighlightRules, TextHighlightRules);\n\n    exports.GolangHighlightRules = GolangHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/golang\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/golang_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar GolangHighlightRules = acequire(\"./golang_highlight_rules\").GolangHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = GolangHighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.foldingRules = new CStyleFoldMode();\n    this.$behaviour = new CstyleBehaviour();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    \n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n        \n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };//end getNextLineIndent\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/golang\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}