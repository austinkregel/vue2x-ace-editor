{"version":3,"sources":["webpack:///./node_modules/brace/mode/d.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","DHighlightRules","keywords","keywordControls","types","modifiers","storages","stringEscapesSeq","builtinConstants","operators","keywordMapper","$keywords","createKeywordMapper","keyword.modifier","keyword.control","keyword.type","keyword","keyword.storage","punctation","keyword.operator","constant.language","identifierRe","onMatch","value","currentState","state","unshift","substr","star-comment","plus-comment","quote-string","backtick-string","operator-heredoc-string","substring","length","map",">","]",")","}","Object","keys","indexOf","shift","identifier-heredoc-string","d-asm","d-asm-instruction","embedRules","metaData","comment","fileTypes","firstLineMatch","foldingStartMarker","foldingStopMarker","keyEquivalent","name","scopeName","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","source","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","$id"],"mappings":"mGAAAA,IAAAC,OAAA,6HAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAI,EAAAJ,EAAA,0BAAAI,mBAEAC,EAAA,WACAC,KAAAC,OAAA,CACAC,MAAA,EACAC,MAAA,kBACAC,MAAA,eAEAL,EAAAM,aACA,CACAC,aAAA,cACAC,iBAAA,MAKAV,EAAAW,SAAAT,EAAAD,GAEAC,EAAAM,WAAA,SAAAH,GACA,OACAC,MAAA,+BACAC,MAAA,kCAIAL,EAAAU,aAAA,SAAAP,GACA,OACAC,MAAA,cACAC,MAAA,gBACAM,KAAAR,IAIAH,EAAAY,WAAA,SAAAT,GACA,OACAC,MAAA,cACAC,MAAA,SACAM,KAAAR,IAKAP,EAAAI,6BAIAP,IAAAC,OAAA,0JAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAK,EAAAL,EAAA,iCAAAK,yBACAD,EAAAJ,EAAA,0BAAAI,mBAEAc,EAAA,WAEA,IAAAC,EAAA,4IAKAC,EAAA,mJAKAC,EAAA,6NAOAC,EAAA,8MAMAC,EAAA,mDAIAC,EAAA,CACAf,MAAA,2BACAC,MAAA,4GAIAe,EAAA,+IAMAC,EAAA,6TAQAC,EAAArB,KAAAsB,UAAAtB,KAAAuB,oBAAA,CACAC,mBAAAR,EACAS,kBAAAX,EACAY,eAAAX,EACAY,QAAAd,EACAe,kBAAAX,EACAY,WAAA,6BACAC,mBAAAV,EACAW,oBAAAZ,GACK,cAELa,EAAA,kCAEAhC,KAAAC,OAAA,CACAC,MAAA,CACA,CACAC,MAAA,UACAC,MAAA,aAEAL,EAAAU,aAAA,aACA,CACAN,MAAA,UACAC,MAAA,SACAM,KAAA,gBACa,CACbP,MAAA,kBACAC,MAAA,aACa,CACbD,MAAA,UACAC,MAAA,SACAM,KAAA,gBACa,CACbuB,QAAA,SAAAC,EAAAC,EAAAC,GAEA,OADAA,EAAAC,QAAArC,KAAAU,KAAAwB,EAAAI,OAAA,IACA,UAEAlC,MAAA,wBACAM,KAAA,2BACa,CACbuB,QAAA,SAAAC,EAAAC,EAAAC,GAEA,OADAA,EAAAC,QAAArC,KAAAU,KAAAwB,EAAAI,OAAA,IACA,UAEAlC,MAAA,oBACAM,KAAA,6BACa,CACbP,MAAA,SACAC,MAAA,SACAM,KAAA,gBACa,CACbP,MAAA,SACAC,MAAA,SACAM,KAAA,mBACa,CACbP,MAAA,SACAC,MAAA,iDACa,CACbD,MAAA,kCACAC,MAAA,gBACAM,KAAA,SACa,CACbP,MAAA,sDACAC,MAAA,yBAAA4B,EAAA,KACa,CACb7B,MAAA,qCACAC,MAAA,4BAAA4B,EAAA,WACa,CACb7B,MAAA,8CACAC,MAAA,IAAAa,EAAA,WAAAe,EAAA,KACa,CACb7B,MAAA,6CACAC,MAAA,yBAAA4B,EAAA,WACa,CACb7B,MAAA,mBACAC,MAAA,6CACa,CACbD,MAAA,mBACAC,MAAA,mFACa,CACbD,MAAA,8BACAC,MAAA,IAAA4B,GACa,CACb7B,MAAAkB,EACAjB,MAAA,6BACa,CACbD,MAAA,mBACAC,MAAAgB,GACa,CACbjB,MAAA,uBACAC,MAAA,2BACa,CACbD,MAAA,eACAC,MAAA,SACa,CACbD,MAAA,eACAC,MAAA,WACa,CACbD,MAAA,OACAC,MAAA,SAGAmC,eAAA,CACA,CACApC,MAAA,UACAC,MAAA,SACAM,KAAA,SACa,CACbJ,aAAA,YAGAkC,eAAA,CACA,CACArC,MAAA,UACAC,MAAA,SACAM,KAAA,SACa,CACbJ,aAAA,YAIAmC,eAAA,CACAvB,EACA,CACAf,MAAA,SACAC,MAAA,UACAM,KAAA,SACa,CACbJ,aAAA,WAIAoC,kBAAA,CACAxB,EACA,CACAf,MAAA,SACAC,MAAA,UACAM,KAAA,SACa,CACbJ,aAAA,WAIAqC,0BAAA,CACA,CACAV,QAAA,SAAAC,EAAAC,EAAAC,GACAF,IAAAU,UAAAV,EAAAW,OAAA,EAAAX,EAAAW,OAAA,GACA,IAAAC,EAAA,CAA+BC,IAAA,IAAAC,IAAA,IAAAC,IAAA,IAAAC,IAA0B,KAGzD,OAFA,GAAAC,OAAAC,KAAAN,GAAAO,QAAAnB,KACAA,EAAAY,EAAAZ,IACAA,GAAAE,EAAA,aACAA,EAAAkB,QACAlB,EAAAkB,QAEA,WAEAlD,MAAA,mBACAM,KAAA,SACa,CACbP,MAAA,SACAC,MAAA,iBAIAmD,4BAAA,CACA,CACAtB,QAAA,SAAAC,EAAAC,EAAAC,GAEA,OADAF,IAAAU,UAAA,EAAAV,EAAAW,OAAA,GACAX,GAAAE,EAAA,aACAA,EAAAkB,QACAlB,EAAAkB,QAEA,WAEAlD,MAAA,8BACAM,KAAA,SACa,CACbP,MAAA,SACAC,MAAA,iBAIAoD,QAAA,CACA,CACArD,MAAA,eACAC,MAAA,MACAM,KAAA,SACa,CACbP,MAAA,sBACAC,MAAA,YACAM,KAAA,qBACa,CACbP,MAAA,OACAC,MAAA,SAGAqD,oBAAA,CACA,CACAtD,MAAA,oBACAC,MAAA,oFACa,CACbD,MAAA,aACAC,MAAA,aACa,CACbD,MAAA,SACAC,MAAA,QACa,CACbD,MAAA,UACAC,MAAA,SACa,CACbD,MAAA,mBACAC,MAAA,eACa,CACbD,MAAA,uBACAC,MAAA,OACa,CACbD,MAAA,uBACAC,MAAA,IACAM,KAAA,SACa,CACbP,MAAA,OACAC,MAAA,UAKAJ,KAAA0D,WAAA3D,EAAA,OACA,CAAAA,EAAAY,WAAA,YAGAC,EAAA+C,SAAA,CACAC,QAAA,aACAC,UAAA,WACAC,eAAA,wBACAC,mBAAA,oGACAC,kBAAA,2BACAC,cAAA,MACAC,KAAA,IACAC,UAAA,YAEAtE,EAAAW,SAAAI,EAAAd,GAEAH,EAAAiB,oBAGApB,IAAAC,OAAA,yHAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,iBACA0E,EAAA1E,EAAA,eAAA0E,MACAC,EAAA3E,EAAA,eAAA4E,SAEAA,EAAA3E,EAAA2E,SAAA,SAAAC,GACAA,IACAvE,KAAA+D,mBAAA,IAAAS,OACAxE,KAAA+D,mBAAAU,OAAAC,QAAA,gBAAAH,EAAArE,QAEAF,KAAAgE,kBAAA,IAAAQ,OACAxE,KAAAgE,kBAAAS,OAAAC,QAAA,gBAAAH,EAAAI,QAIA9E,EAAAW,SAAA8D,EAAAD,GAEA,WAEArE,KAAA+D,mBAAA,mCACA/D,KAAAgE,kBAAA,uCACAhE,KAAA4E,yBAAA,uBACA5E,KAAA6E,yBAAA,2BACA7E,KAAA8E,cAAA,4BACA9E,KAAA+E,mBAAA/E,KAAAgF,cACAhF,KAAAgF,cAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAH,EAAAI,QAAAF,GAEA,GAAAnF,KAAA4E,yBAAAU,KAAAF,KACApF,KAAA8E,cAAAQ,KAAAF,KAAApF,KAAA6E,yBAAAS,KAAAF,GACA,SAGA,IAAAG,EAAAvF,KAAA+E,mBAAAE,EAAAC,EAAAC,GAEA,OAAAI,GAAAvF,KAAA8E,cAAAQ,KAAAF,GACA,QAEAG,GAGAvF,KAAAwF,mBAAA,SAAAP,EAAAC,EAAAC,EAAAM,GACA,IAAAL,EAAAH,EAAAI,QAAAF,GAEA,GAAAnF,KAAA8E,cAAAQ,KAAAF,GACA,OAAApF,KAAA0F,sBAAAT,EAAAG,EAAAD,GAEA,IAAAQ,EAAAP,EAAAO,MAAA3F,KAAA+D,oBACA,GAAA4B,EAAA,CACA,IAAAC,EAAAD,EAAAE,MAEA,GAAAF,EAAA,GACA,OAAA3F,KAAA8F,oBAAAb,EAAAU,EAAA,GAAAR,EAAAS,GAEA,IAAAG,EAAAd,EAAAe,oBAAAb,EAAAS,EAAAD,EAAA,GAAA9C,OAAA,GASA,OAPAkD,MAAAE,gBACAR,EACAM,EAAA/F,KAAAkG,gBAAAjB,EAAAE,GACiB,OAAAD,IACjBa,EAAA,OAGAA,EAGA,iBAAAb,EAAA,CAGAS,EAAAP,EAAAO,MAAA3F,KAAAgE,mBACA,GAAA2B,EAAA,CACAC,EAAAD,EAAAE,MAAAF,EAAA,GAAA9C,OAEA,OAAA8C,EAAA,GACA3F,KAAAmG,oBAAAlB,EAAAU,EAAA,GAAAR,EAAAS,GAEAX,EAAAe,oBAAAb,EAAAS,GAAA,MAIA5F,KAAAkG,gBAAA,SAAAjB,EAAAE,GACA,IAAAC,EAAAH,EAAAI,QAAAF,GACAiB,EAAAhB,EAAAiB,OAAA,MACAC,EAAAnB,EACAoB,EAAAnB,EAAAvC,OACAsC,GAAA,EACA,IAAAqB,EAAArB,EACAsB,EAAAxB,EAAAyB,YACA,QAAAvB,EAAAsB,EAAA,CACArB,EAAAH,EAAAI,QAAAF,GACA,IAAAwB,EAAAvB,EAAAiB,OAAA,MACA,QAAAM,EAAA,CAEA,GAAAP,EAAAO,EACA,MACA,IAAAC,EAAA5G,KAAAwF,mBAAAP,EAAA,MAAAE,GAEA,GAAAyB,EAAA,CACA,GAAAA,EAAA1G,MAAAiF,KAAAmB,EACA,MACiB,GAAAM,EAAAX,cACjBd,EAAAyB,EAAAjC,IAAAQ,SACiB,GAAAiB,GAAAO,EACjB,MAGAH,EAAArB,GAGA,WAAAf,EAAAkC,EAAAC,EAAAC,EAAAvB,EAAAI,QAAAmB,GAAA3D,SAEA7C,KAAA0F,sBAAA,SAAAT,EAAAG,EAAAD,GACA,IAAAoB,EAAAnB,EAAAiB,OAAA,QACAI,EAAAxB,EAAAyB,YACAJ,EAAAnB,EAEA0B,EAAA,uCACAC,EAAA,EACA,QAAA3B,EAAAsB,EAAA,CACArB,EAAAH,EAAAI,QAAAF,GACA,IAAA4B,EAAAF,EAAAG,KAAA5B,GACA,GAAA2B,IACAA,EAAA,GAAAD,IACAA,KAEAA,GAAA,MAGA,IAAAN,EAAArB,EACA,GAAAqB,EAAAF,EACA,WAAAlC,EAAAkC,EAAAC,EAAAC,EAAApB,EAAAvC,UAICoE,KAAA3C,EAAA4C,aAID1H,IAAAC,OAAA,0IAAAC,EAAAC,EAAAC,GACA,aAEA,IAAAC,EAAAH,EAAA,cACAyH,EAAAzH,EAAA,UAAA0H,KACAxG,EAAAlB,EAAA,uBAAAkB,gBACA0D,EAAA5E,EAAA,oBAAA4E,SAEA8C,EAAA,WACApH,KAAAqH,eAAAzG,EACAZ,KAAAsH,aAAA,IAAAhD,EACAtE,KAAAuH,WAAAvH,KAAAwH,mBAEA3H,EAAAW,SAAA4G,EAAAD,GAEA,WACAnH,KAAAyH,iBAAA,KACAzH,KAAA0H,aAAA,CAAyBxH,MAAA,KAAAyE,IAAA,MACzB3E,KAAA2H,IAAA,cACCV,KAAAG,EAAAF,WAEDvH,EAAAyH","file":"js/chunk-2d0dab7e.22a0ad5f.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n};\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/d_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DHighlightRules = function() {\n\n    var keywords = (\n        \"this|super|import|module|body|mixin|__traits|invariant|alias|asm|delete|\"+\n        \"typeof|typeid|sizeof|cast|new|in|is|typedef|__vector|__parameters\"\n    );\n\n    var keywordControls = (\n        \"break|case|continue|default|do|else|for|foreach|foreach_reverse|goto|if|\" +\n        \"return|switch|while|catch|try|throw|finally|version|assert|unittest|with\"\n    );\n    \n    var types = (\n        \"auto|bool|char|dchar|wchar|byte|ubyte|float|double|real|\" +\n        \"cfloat|creal|cdouble|cent|ifloat|ireal|idouble|\" +\n        \"int|long|short|void|uint|ulong|ushort|ucent|\" +\n        \"function|delegate|string|wstring|dstring|size_t|ptrdiff_t|hash_t|Object\"\n    );\n\n    var modifiers = (\n        \"abstract|align|debug|deprecated|export|extern|const|final|in|inout|out|\" +\n        \"ref|immutable|lazy|nothrow|override|package|pragma|private|protected|\" +\n        \"public|pure|scope|shared|__gshared|synchronized|static|volatile\"\n    );\n    \n    var storages = (\n        \"class|struct|union|template|interface|enum|macro\"\n    );\n    \n    var stringEscapesSeq =  {\n        token: \"constant.language.escape\",\n        regex: \"\\\\\\\\(?:(?:x[0-9A-F]{2})|(?:[0-7]{1,3})|(?:['\\\"\\\\?0abfnrtv\\\\\\\\])|\" +\n            \"(?:u[0-9a-fA-F]{4})|(?:U[0-9a-fA-F]{8}))\"\n    };\n\n    var builtinConstants = (\n        \"null|true|false|\"+\n        \"__DATE__|__EOF__|__TIME__|__TIMESTAMP__|__VENDOR__|__VERSION__|\"+\n        \"__FILE__|__MODULE__|__LINE__|__FUNCTION__|__PRETTY_FUNCTION__\"\n    );\n    \n    var operators = (\n        \"/|/\\\\=|&|&\\\\=|&&|\\\\|\\\\|\\\\=|\\\\|\\\\||\\\\-|\\\\-\\\\=|\\\\-\\\\-|\\\\+|\" +\n        \"\\\\+\\\\=|\\\\+\\\\+|\\\\<|\\\\<\\\\=|\\\\<\\\\<|\\\\<\\\\<\\\\=|\\\\<\\\\>|\\\\<\\\\>\\\\=|\\\\>|\\\\>\\\\=|\\\\>\\\\>\\\\=|\" +\n        \"\\\\>\\\\>\\\\>\\\\=|\\\\>\\\\>|\\\\>\\\\>\\\\>|\\\\!|\\\\!\\\\=|\\\\!\\\\<\\\\>|\\\\!\\\\<\\\\>\\\\=|\\\\!\\\\<|\\\\!\\\\<\\\\=|\" +\n        \"\\\\!\\\\>|\\\\!\\\\>\\\\=|\\\\?|\\\\$|\\\\=|\\\\=\\\\=|\\\\*|\\\\*\\\\=|%|%\\\\=|\" +\n        \"\\\\^|\\\\^\\\\=|\\\\^\\\\^|\\\\^\\\\^\\\\=|~|~\\\\=|\\\\=\\\\>|#\"\n    );\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.modifier\" : modifiers,\n        \"keyword.control\" :  keywordControls,\n        \"keyword.type\" :     types,\n        \"keyword\":           keywords,\n        \"keyword.storage\":   storages,\n        \"punctation\": \"\\\\.|\\\\,|;|\\\\.\\\\.|\\\\.\\\\.\\\\.\",\n        \"keyword.operator\" : operators,\n        \"constant.language\": builtinConstants\n    }, \"identifier\");\n    \n    var identifierRe = \"[a-zA-Z_\\u00a1-\\uffff][a-zA-Z\\\\d_\\u00a1-\\uffff]*\\\\b\";\n\n    this.$rules = {\n        \"start\" : [\n            {     //-------------------------------------------------------- COMMENTS\n                token : \"comment\",\n                regex : \"\\\\/\\\\/.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment\n                regex : \"\\\\/\\\\*\",\n                next : \"star-comment\"\n            }, {\n                token: \"comment.shebang\",\n                regex: \"^\\\\s*#!.*\"\n            }, {\n                token : \"comment\",\n                regex : \"\\\\/\\\\+\",\n                next: \"plus-comment\"\n            }, {  //-------------------------------------------------------- STRINGS\n                onMatch: function(value, currentState, state) {\n                    state.unshift(this.next, value.substr(2));\n                    return \"string\";\n                },\n                regex: 'q\"(?:[\\\\[\\\\(\\\\{\\\\<]+)',\n                next: 'operator-heredoc-string'\n            }, {\n                onMatch: function(value, currentState, state) {\n                    state.unshift(this.next, value.substr(2));\n                    return \"string\";\n                },\n                regex: 'q\"(?:[a-zA-Z_]+)$',\n                next: 'identifier-heredoc-string'\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[xr]?\"',\n                next : \"quote-string\"\n            }, {\n                token : \"string\", // multi line string start\n                regex : '[xr]?`',\n                next : \"backtick-string\"\n            }, {\n                token : \"string\", // single line\n                regex : \"[xr]?['](?:(?:\\\\\\\\.)|(?:[^'\\\\\\\\]))*?['][cdw]?\"\n            }, {  //-------------------------------------------------------- RULES\n                token: [\"keyword\", \"text\", \"paren.lparen\"],\n                regex: /(asm)(\\s*)({)/,\n                next: \"d-asm\"\n            }, {\n                token: [\"keyword\", \"text\", \"paren.lparen\", \"constant.language\"],\n                regex: \"(__traits)(\\\\s*)(\\\\()(\"+identifierRe+\")\"\n            }, { // import|module abc\n                token: [\"keyword\", \"text\", \"variable.module\"],\n                regex: \"(import|module)(\\\\s+)((?:\"+identifierRe+\"\\\\.?)*)\"\n            }, { // storage Name\n                token: [\"keyword.storage\", \"text\", \"entity.name.type\"],\n                regex: \"(\"+storages+\")(\\\\s*)(\"+identifierRe+\")\"\n            }, { // alias|typedef foo bar;\n                token: [\"keyword\", \"text\", \"variable.storage\", \"text\"],\n                regex: \"(alias|typedef)(\\\\s*)(\"+identifierRe+\")(\\\\s*)\"\n            }, {  //-------------------------------------------------------- OTHERS\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F_]+(l|ul|u|f|F|L|U|UL)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d[\\\\d_]*(?:(?:\\\\.[\\\\d_]*)?(?:[eE][+-]?[\\\\d_]+)?)?(l|ul|u|f|F|L|U|UL)?\\\\b\"\n            }, {\n                token: \"entity.other.attribute-name\",\n                regex: \"@\"+identifierRe\n            }, {\n                token : keywordMapper,\n                regex : \"[a-zA-Z_][a-zA-Z0-9_]*\\\\b\"\n            }, {\n                token : \"keyword.operator\",\n                regex : operators\n            }, {\n                token : \"punctuation.operator\",\n                regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.|\\\\:\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"star-comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\*\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken: 'comment'\n            }\n        ],\n        \"plus-comment\" : [\n            {\n                token : \"comment\", // closing comment\n                regex : \"\\\\+\\\\/\",\n                next : \"start\"\n            }, {\n                defaultToken: 'comment'\n            }\n        ],\n        \n        \"quote-string\" : [\n           stringEscapesSeq,\n           {\n                token : \"string\",\n                regex : '\"[cdw]?',\n                next : \"start\"\n            }, {\n                defaultToken: 'string'\n            }\n        ],\n        \n        \"backtick-string\" : [\n           stringEscapesSeq,\n           {\n                token : \"string\",\n                regex : '`[cdw]?',\n                next : \"start\"\n            }, {\n                defaultToken: 'string'\n            }\n        ],\n        \n        \"operator-heredoc-string\": [\n            {\n                onMatch: function(value, currentState, state) {\n                    value = value.substring(value.length-2, value.length-1);\n                    var map = {'>':'<',']':'[',')':'(','}':'{'};\n                    if(Object.keys(map).indexOf(value) != -1)\n                        value = map[value];\n                    if(value != state[1]) return \"string\";\n                    state.shift();\n                    state.shift();\n                    \n                    return \"string\";\n                },\n                regex: '(?:[\\\\]\\\\)}>]+)\"',\n                next: 'start'\n            }, {\n                token: 'string',\n                regex: '[^\\\\]\\\\)}>]+'\n            }\n        ],\n        \n        \"identifier-heredoc-string\": [\n            {\n                onMatch: function(value, currentState, state) {\n                    value = value.substring(0, value.length-1);\n                    if(value != state[1]) return \"string\";\n                    state.shift();\n                    state.shift();\n                    \n                    return \"string\";\n                },\n                regex: '^(?:[A-Za-z_][a-zA-Z0-9]+)\"',\n                next: 'start'\n            }, {\n                token: 'string',\n                regex: '[^\\\\]\\\\)}>]+'\n            }\n        ],\n        \n        \"d-asm\": [\n            {\n                token: \"paren.rparen\",\n                regex: \"\\\\}\",\n                next: \"start\"\n            }, {\n                token: 'keyword.instruction',\n                regex: '[a-zA-Z]+',\n                next: 'd-asm-instruction' \n            }, {\n                token: \"text\",\n                regex: \"\\\\s+\"\n            }\n        ],\n        'd-asm-instruction': [\n            {\n                token: 'constant.language',\n                regex: /AL|AH|AX|EAX|BL|BH|BX|EBX|CL|CH|CX|ECX|DL|DH|DX|EDX|BP|EBP|SP|ESP|DI|EDI|SI|ESI/i\n            }, {\n                token: 'identifier',\n                regex: '[a-zA-Z]+'\n            }, {\n                token: 'string',\n                regex: '\".*\"'\n            }, {\n                token: 'comment',\n                regex: '//.*$'\n            }, {\n                token: 'constant.numeric',\n                regex: '[0-9.xA-F]+'\n            }, {\n                token: 'punctuation.operator',\n                regex: '\\\\,'\n            }, {\n                token: 'punctuation.operator',\n                regex: ';',\n                next: 'd-asm'\n            }, {\n                token: 'text',\n                regex: '\\\\s+'\n            }\n        ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n};\n\nDHighlightRules.metaData = {\n      comment: 'D language',\n      fileTypes: [ 'd', 'di' ],\n      firstLineMatch: '^#!.*\\\\b[glr]?dmd\\\\b.',\n      foldingStartMarker: '(?x)/\\\\*\\\\*(?!\\\\*)|^(?![^{]*?//|[^{]*?/\\\\*(?!.*?\\\\*/.*?\\\\{)).*?\\\\{\\\\s*($|//|/\\\\*(?!.*?\\\\*/.*\\\\S))',\n      foldingStopMarker: '(?<!\\\\*)\\\\*\\\\*/|^\\\\s*\\\\}',\n      keyEquivalent: '^~D',\n      name: 'D',\n      scopeName: 'source.d'\n};\noop.inherits(DHighlightRules, TextHighlightRules);\n\nexports.DHighlightRules = DHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/d\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/d_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar DHighlightRules = acequire(\"./d_highlight_rules\").DHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = DHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\"};\n    this.$id = \"ace/mode/d\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}