{"version":3,"sources":["webpack:///./node_modules/brace/mode/lean.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","DocCommentHighlightRules","this","$rules","start","token","regex","getTagRule","defaultToken","caseInsensitive","inherits","getStartRule","next","getEndRule","leanHighlightRules","keywordControls","join","nameProviders","storageType","storageModifiers","keywordOperators","keywordMapper","$keywords","createKeywordMapper","keyword.control","storage.type","keyword.operator","variable.language","identifierRe","operatorRe","RegExp","stateName","comment","embedRules","normalizeRules","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","TextMode","Mode","HighlightRules","$outdent","lineCommentStart","blockComment","end","getNextLineIndent","state","tab","tokenizedLine","getTokenizer","getLineTokens","tokens","endState","type","$id"],"mappings":"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","file":"js/chunk-2d0daa6a.2e006de8.js","sourcesContent":["ace.define(\"ace/mode/doc_comment_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar DocCommentHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [ {\n            token : \"comment.doc.tag\",\n            regex : \"@[\\\\w\\\\d_]+\" // TODO: fix email addresses\n        }, \n        DocCommentHighlightRules.getTagRule(),\n        {\n            defaultToken : \"comment.doc\",\n            caseInsensitive: true\n        }]\n    };\n};\n\noop.inherits(DocCommentHighlightRules, TextHighlightRules);\n\nDocCommentHighlightRules.getTagRule = function(start) {\n    return {\n        token : \"comment.doc.tag.storage.type\",\n        regex : \"\\\\b(?:TODO|FIXME|XXX|HACK)\\\\b\"\n    };\n}\n\nDocCommentHighlightRules.getStartRule = function(start) {\n    return {\n        token : \"comment.doc\", // doc comment\n        regex : \"\\\\/\\\\*(?=\\\\*)\",\n        next  : start\n    };\n};\n\nDocCommentHighlightRules.getEndRule = function (start) {\n    return {\n        token : \"comment.doc\", // closing comment\n        regex : \"\\\\*\\\\/\",\n        next  : start\n    };\n};\n\n\nexports.DocCommentHighlightRules = DocCommentHighlightRules;\n\n});\n\nace.define(\"ace/mode/lean_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/doc_comment_highlight_rules\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar DocCommentHighlightRules = acequire(\"./doc_comment_highlight_rules\").DocCommentHighlightRules;\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar leanHighlightRules = function() {\n\n    var keywordControls = (\n        [ \"add_rewrite\", \"alias\", \"as\", \"assume\", \"attribute\",\n          \"begin\", \"by\", \"calc\", \"calc_refl\", \"calc_subst\", \"calc_trans\", \"check\",\n          \"classes\", \"coercions\", \"conjecture\", \"constants\", \"context\",\n          \"corollary\", \"else\", \"end\", \"environment\", \"eval\", \"example\",\n          \"exists\", \"exit\", \"export\", \"exposing\", \"extends\", \"fields\", \"find_decl\",\n          \"forall\", \"from\", \"fun\", \"have\", \"help\", \"hiding\", \"if\",\n          \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instances\",\n          \"let\", \"local\", \"match\", \"namespace\", \"notation\", \"obtain\", \"obtains\",\n          \"omit\", \"opaque\", \"open\", \"options\", \"parameter\", \"parameters\", \"postfix\",\n          \"precedence\", \"prefix\", \"premise\", \"premises\", \"print\", \"private\", \"proof\",\n          \"protected\", \"qed\", \"raw\", \"renaming\", \"section\", \"set_option\",\n          \"show\", \"tactic_hint\", \"take\", \"then\", \"universe\",\n          \"universes\", \"using\", \"variable\", \"variables\", \"with\"].join(\"|\")\n    );\n\n    var nameProviders = (\n        [\"inductive\", \"structure\", \"record\", \"theorem\", \"axiom\",\n         \"axioms\", \"lemma\", \"hypothesis\", \"definition\", \"constant\"].join(\"|\")\n    );\n\n    var storageType = (\n        [\"Prop\", \"Type\", \"Type'\", \"Type₊\", \"Type₁\", \"Type₂\", \"Type₃\"].join(\"|\")\n    );\n\n    var storageModifiers = (\n        \"\\\\[(\" +\n            [\"abbreviations\", \"all-transparent\", \"begin-end-hints\", \"class\", \"classes\", \"coercion\",\n             \"coercions\", \"declarations\", \"decls\", \"instance\", \"irreducible\",\n             \"multiple-instances\", \"notation\", \"notations\", \"parsing-only\", \"persistent\",\n             \"reduce-hints\", \"reducible\", \"tactic-hints\", \"visible\", \"wf\", \"whnf\"\n            ].join(\"|\") +\n            \")\\\\]\"\n    );\n\n    var keywordOperators = (\n        [].join(\"|\")\n    );\n\n    var keywordMapper = this.$keywords = this.createKeywordMapper({\n        \"keyword.control\" : keywordControls,\n        \"storage.type\" : storageType,\n        \"keyword.operator\" : keywordOperators,\n        \"variable.language\": \"sorry\"\n    }, \"identifier\");\n\n    var identifierRe = \"[A-Za-z_\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2100-\\u214f][A-Za-z0-9_'\\u03b1-\\u03ba\\u03bc-\\u03fb\\u1f00-\\u1ffe\\u2070-\\u2079\\u207f-\\u2089\\u2090-\\u209c\\u2100-\\u214f]*\";\n    var operatorRe = new RegExp([\"#\", \"@\", \"->\", \"∼\", \"↔\", \"/\", \"==\", \"=\", \":=\", \"<->\",\n                                 \"/\\\\\", \"\\\\/\", \"∧\", \"∨\", \"≠\", \"<\", \">\", \"≤\", \"≥\", \"¬\",\n                                 \"<=\", \">=\", \"⁻¹\", \"⬝\", \"▸\", \"\\\\+\", \"\\\\*\", \"-\", \"/\",\n                                 \"λ\", \"→\", \"∃\", \"∀\", \":=\"].join(\"|\"));\n\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"comment\", // single line comment \"--\"\n                regex : \"--.*$\"\n            },\n            DocCommentHighlightRules.getStartRule(\"doc-start\"),\n            {\n                token : \"comment\", // multi line comment \"/-\"\n                regex : \"\\\\/-\",\n                next : \"comment\"\n            }, {\n                stateName: \"qqstring\",\n                token : \"string.start\", regex : '\"', next : [\n                    {token : \"string.end\", regex : '\"', next : \"start\"},\n                    {token : \"constant.language.escape\", regex : /\\\\[n\"\\\\]/},\n                    {defaultToken: \"string\"}\n                ]\n            }, {\n                token : \"keyword.control\", regex : nameProviders, next : [\n                    {token : \"variable.language\", regex : identifierRe, next : \"start\"} ]\n            }, {\n                token : \"constant.numeric\", // hex\n                regex : \"0[xX][0-9a-fA-F]+(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\\\b\"\n            }, {\n                token : \"storage.modifier\",\n                regex : storageModifiers\n            }, {\n                token : keywordMapper,\n                regex : identifierRe\n            }, {\n                token : \"operator\",\n                regex : operatorRe\n            }, {\n              token : \"punctuation.operator\",\n              regex : \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"comment\" : [ {token: \"comment\", regex: \"-/\", next: \"start\"},\n                      {defaultToken: \"comment\"} ]\n    };\n\n    this.embedRules(DocCommentHighlightRules, \"doc-\",\n        [ DocCommentHighlightRules.getEndRule(\"start\") ]);\n    this.normalizeRules();\n};\n\noop.inherits(leanHighlightRules, TextHighlightRules);\n\nexports.leanHighlightRules = leanHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/lean\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/lean_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar leanHighlightRules = acequire(\"./lean_highlight_rules\").leanHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar Range = acequire(\"../range\").Range;\n\nvar Mode = function() {\n    this.HighlightRules = leanHighlightRules;\n\n    this.$outdent = new MatchingBraceOutdent();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n    this.blockComment = {start: \"/-\", end: \"-/\"};\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        var tokenizedLine = this.getTokenizer().getLineTokens(line, state);\n        var tokens = tokenizedLine.tokens;\n        var endState = tokenizedLine.state;\n\n        if (tokens.length && tokens[tokens.length-1].type == \"comment\") {\n            return indent;\n        }\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        } else if (state == \"doc-start\") {\n            if (endState == \"start\") {\n                return \"\";\n            }\n            var match = line.match(/^\\s*(\\/?)\\*/);\n            if (match) {\n                if (match[1]) {\n                    indent += \" \";\n                }\n                indent += \"- \";\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n    this.$id = \"ace/mode/lean\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}