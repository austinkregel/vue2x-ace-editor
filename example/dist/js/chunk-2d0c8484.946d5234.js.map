{"version":3,"sources":["webpack:///./node_modules/brace/mode/rust.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","stringEscape","source","RustHighlightRules","this","$rules","start","token","regex","stateName","onMatch","value","currentState","stack","unshift","next","length","shift","defaultToken","push","normalizeRules","metaData","fileTypes","foldingStartMarker","foldingStopMarker","name","scopeName","inherits","Range","BaseFoldMode","FoldMode","commentRegex","RegExp","replace","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","row","line","getLine","test","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","match","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","indent","subRange","re","depth","m","exec","call","prototype","TextMode","Mode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","blockComment","nestable","$quotes","\"","$id"],"mappings":"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","file":"js/chunk-2d0c8484.946d5234.js","sourcesContent":["ace.define(\"ace/mode/rust_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar stringEscape = /\\\\(?:[nrt0'\"\\\\]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\})/.source;\nvar RustHighlightRules = function() {\n\n    this.$rules = { start:\n       [ { token: 'variable.other.source.rust',\n           regex: '\\'[a-zA-Z_][a-zA-Z0-9_]*(?![\\\\\\'])' },\n         { token: 'string.quoted.single.source.rust',\n           regex: \"'(?:[^'\\\\\\\\]|\" + stringEscape + \")'\" },\n         {\n            stateName: \"bracketedComment\",\n            onMatch : function(value, currentState, stack){\n                stack.unshift(this.next, value.length - 1, currentState);\n                return \"string.quoted.raw.source.rust\";\n            },\n            regex : /r#*\"/,\n            next  : [\n                {\n                    onMatch : function(value, currentState, stack) {\n                        var token = \"string.quoted.raw.source.rust\";\n                        if (value.length >= stack[1]) {\n                            if (value.length > stack[1])\n                                token = \"invalid\";\n                            stack.shift();\n                            stack.shift();\n                            this.next = stack.shift();\n                        } else {\n                            this.next = \"\";\n                        }\n                        return token;\n                    },\n                    regex : /\"#*/,\n                    next  : \"start\"\n                }, {\n                    defaultToken : \"string.quoted.raw.source.rust\"\n                }\n            ]\n         },\n         { token: 'string.quoted.double.source.rust',\n           regex: '\"',\n           push: \n            [ { token: 'string.quoted.double.source.rust',\n                regex: '\"',\n                next: 'pop' },\n              { token: 'constant.character.escape.source.rust',\n                regex: stringEscape },\n              { defaultToken: 'string.quoted.double.source.rust' } ] },\n         { token: [ 'keyword.source.rust', 'text', 'entity.name.function.source.rust' ],\n           regex: '\\\\b(fn)(\\\\s+)([a-zA-Z_][a-zA-Z0-9_]*)' },\n         { token: 'support.constant', regex: '\\\\b[a-zA-Z_][\\\\w\\\\d]*::' },\n         { token: 'keyword.source.rust',\n           regex: '\\\\b(?:abstract|alignof|as|box|break|continue|const|crate|do|else|enum|extern|for|final|if|impl|in|let|loop|macro|match|mod|move|mut|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|unsafe|unsized|use|virtual|where|while|yield)\\\\b' },\n         { token: 'storage.type.source.rust',\n           regex: '\\\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|u128|f16|f32|f64|i8|i16|i32|i64|i128|str|option|either|c_float|c_double|c_void|FILE|fpos_t|DIR|dirent|c_char|c_schar|c_uchar|c_short|c_ushort|c_int|c_uint|c_long|c_ulong|size_t|ptrdiff_t|clock_t|time_t|c_longlong|c_ulonglong|intptr_t|uintptr_t|off_t|dev_t|ino_t|pid_t|mode_t|ssize_t)\\\\b' },\n         { token: 'variable.language.source.rust', regex: '\\\\bself\\\\b' },\n         \n         { token: 'comment.line.doc.source.rust',\n           regex: '//!.*$' },\n         { token: 'comment.line.double-dash.source.rust',\n           regex: '//.*$' },\n         { token: 'comment.start.block.source.rust',\n           regex: '/\\\\*',\n           stateName: 'comment',\n           push: \n            [ { token: 'comment.start.block.source.rust',\n                regex: '/\\\\*',\n                push: 'comment' },\n              { token: 'comment.end.block.source.rust',\n                regex: '\\\\*/',\n                next: 'pop' },\n              { defaultToken: 'comment.block.source.rust' } ] },\n         \n         { token: 'keyword.operator',\n           regex: /\\$|[-=]>|[-+%^=!&|<>]=?|[*/](?![*/])=?/ },\n         { token : \"punctuation.operator\", regex : /[?:,;.]/ },\n         { token : \"paren.lparen\", regex : /[\\[({]/ },\n         { token : \"paren.rparen\", regex : /[\\])}]/ },\n         { token: 'constant.language.source.rust',\n           regex: '\\\\b(?:true|false|Some|None|Ok|Err)\\\\b' },\n         { token: 'support.constant.source.rust',\n           regex: '\\\\b(?:EXIT_FAILURE|EXIT_SUCCESS|RAND_MAX|EOF|SEEK_SET|SEEK_CUR|SEEK_END|_IOFBF|_IONBF|_IOLBF|BUFSIZ|FOPEN_MAX|FILENAME_MAX|L_tmpnam|TMP_MAX|O_RDONLY|O_WRONLY|O_RDWR|O_APPEND|O_CREAT|O_EXCL|O_TRUNC|S_IFIFO|S_IFCHR|S_IFBLK|S_IFDIR|S_IFREG|S_IFMT|S_IEXEC|S_IWRITE|S_IREAD|S_IRWXU|S_IXUSR|S_IWUSR|S_IRUSR|F_OK|R_OK|W_OK|X_OK|STDIN_FILENO|STDOUT_FILENO|STDERR_FILENO)\\\\b' },\n         { token: 'meta.preprocessor.source.rust',\n           regex: '\\\\b\\\\w\\\\(\\\\w\\\\)*!|#\\\\[[\\\\w=\\\\(\\\\)_]+\\\\]\\\\b' },\n         { token: 'constant.numeric.source.rust',\n           regex: /\\b(?:0x[a-fA-F0-9_]+|0o[0-7_]+|0b[01_]+|[0-9][0-9_]*(?!\\.))(?:[iu](?:size|8|16|32|64|128))?\\b/ },\n         { token: 'constant.numeric.source.rust',\n           regex: /\\b(?:[0-9][0-9_]*)(?:\\.[0-9][0-9_]*)?(?:[Ee][+-][0-9][0-9_]*)?(?:f32|f64)?\\b/ } ] };\n    \n    this.normalizeRules();\n};\n\nRustHighlightRules.metaData = { fileTypes: [ 'rs', 'rc' ],\n      foldingStartMarker: '^.*\\\\bfn\\\\s*(\\\\w+\\\\s*)?\\\\([^\\\\)]*\\\\)(\\\\s*\\\\{[^\\\\}]*)?\\\\s*$',\n      foldingStopMarker: '^\\\\s*\\\\}',\n      name: 'Rust',\n      scopeName: 'source.rust' };\n\n\noop.inherits(RustHighlightRules, TextHighlightRules);\n\nexports.RustHighlightRules = RustHighlightRules;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/rust\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/rust_highlight_rules\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar RustHighlightRules = acequire(\"./rust_highlight_rules\").RustHighlightRules;\nvar FoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = RustHighlightRules;\n    this.foldingRules = new FoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"//\";\n    this.blockComment = {start: \"/*\", end: \"*/\", nestable: true};\n    this.$quotes = { '\"': '\"' };\n    this.$id = \"ace/mode/rust\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}