{"version":3,"sources":["webpack:///./node_modules/brace/mode/cirru.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","CirruHighlightRules","this","$rules","start","token","regex","next","comment","string","escape","line","inherits","BaseFoldMode","FoldMode","Range","getFoldWidgetRange","session","foldStyle","row","range","indentationBlock","re","getLine","startLevel","search","startColumn","length","maxRow","getLength","startRow","endRow","level","endColumn","getFoldWidget","indent","prev","prevIndent","nextIndent","foldWidgets","call","prototype","TextMode","Mode","CoffeeFoldMode","HighlightRules","foldingRules","$behaviour","$defaultBehaviour","lineCommentStart","$id"],"mappings":"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","file":"js/chunk-2d21b898.ea0f7674.js","sourcesContent":["ace.define(\"ace/mode/cirru_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\nvar CirruHighlightRules = function() {\n    this.$rules = {\n        start: [{\n            token: 'constant.numeric',\n            regex: /[\\d\\.]+/\n        }, {\n            token: 'comment.line.double-dash',\n            regex: /--/,\n            next: 'comment'\n        }, {\n            token: 'storage.modifier',\n            regex: /\\(/\n        }, {\n            token: 'storage.modifier',\n            regex: /,/,\n            next: 'line'\n        }, {\n            token: 'support.function',\n            regex: /[^\\(\\)\"\\s]+/,\n            next: 'line'\n        }, {\n            token: 'string.quoted.double',\n            regex: /\"/,\n            next: 'string'\n        }, {\n            token: 'storage.modifier',\n            regex: /\\)/\n        }],\n        comment: [{\n            token: 'comment.line.double-dash',\n            regex: / +[^\\n]+/,\n            next: 'start'\n        }],\n        string: [{\n            token: 'string.quoted.double',\n            regex: /\"/,\n            next: 'line'\n        }, {\n            token: 'constant.character.escape',\n            regex: /\\\\/,\n            next: 'escape'\n        }, {\n            token: 'string.quoted.double',\n            regex: /[^\\\\\"]+/\n        }],\n        escape: [{\n            token: 'constant.character.escape',\n            regex: /./,\n            next: 'string'\n        }],\n        line: [{\n            token: 'constant.numeric',\n            regex: /[\\d\\.]+/\n        }, {\n            token: 'markup.raw',\n            regex: /^\\s*/,\n            next: 'start'\n        }, {\n            token: 'storage.modifier',\n            regex: /\\$/,\n            next: 'start'\n        }, {\n            token: 'variable.parameter',\n            regex: /[^\\(\\)\"\\s]+/\n        }, {\n            token: 'storage.modifier',\n            regex: /\\(/,\n            next: 'start'\n        }, {\n            token: 'storage.modifier',\n            regex: /\\)/\n        }, {\n            token: 'markup.raw',\n            regex: /^ */,\n            next: 'start'\n        }, {\n            token: 'string.quoted.double',\n            regex: /\"/,\n            next: 'string'\n        }]\n    };\n\n};\n\noop.inherits(CirruHighlightRules, TextHighlightRules);\n\nexports.CirruHighlightRules = CirruHighlightRules;\n});\n\nace.define(\"ace/mode/folding/coffee\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/folding/fold_mode\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\nvar Range = acequire(\"../../range\").Range;\n\nvar FoldMode = exports.FoldMode = function() {};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n\n    this.getFoldWidgetRange = function(session, foldStyle, row) {\n        var range = this.indentationBlock(session, row);\n        if (range)\n            return range;\n\n        var re = /\\S/;\n        var line = session.getLine(row);\n        var startLevel = line.search(re);\n        if (startLevel == -1 || line[startLevel] != \"#\")\n            return;\n\n        var startColumn = line.length;\n        var maxRow = session.getLength();\n        var startRow = row;\n        var endRow = row;\n\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var level = line.search(re);\n\n            if (level == -1)\n                continue;\n\n            if (line[level] != \"#\")\n                break;\n\n            endRow = row;\n        }\n\n        if (endRow > startRow) {\n            var endColumn = session.getLine(endRow).length;\n            return new Range(startRow, startColumn, endRow, endColumn);\n        }\n    };\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n        var indent = line.search(/\\S/);\n        var next = session.getLine(row + 1);\n        var prev = session.getLine(row - 1);\n        var prevIndent = prev.search(/\\S/);\n        var nextIndent = next.search(/\\S/);\n\n        if (indent == -1) {\n            session.foldWidgets[row - 1] = prevIndent!= -1 && prevIndent < nextIndent ? \"start\" : \"\";\n            return \"\";\n        }\n        if (prevIndent == -1) {\n            if (indent == nextIndent && line[indent] == \"#\" && next[indent] == \"#\") {\n                session.foldWidgets[row - 1] = \"\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"start\";\n            }\n        } else if (prevIndent == indent && line[indent] == \"#\" && prev[indent] == \"#\") {\n            if (session.getLine(row - 2).search(/\\S/) == -1) {\n                session.foldWidgets[row - 1] = \"start\";\n                session.foldWidgets[row + 1] = \"\";\n                return \"\";\n            }\n        }\n\n        if (prevIndent!= -1 && prevIndent < indent)\n            session.foldWidgets[row - 1] = \"start\";\n        else\n            session.foldWidgets[row - 1] = \"\";\n\n        if (indent < nextIndent)\n            return \"start\";\n        else\n            return \"\";\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/cirru\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/cirru_highlight_rules\",\"ace/mode/folding/coffee\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar CirruHighlightRules = acequire(\"./cirru_highlight_rules\").CirruHighlightRules;\nvar CoffeeFoldMode = acequire(\"./folding/coffee\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = CirruHighlightRules;\n    this.foldingRules = new CoffeeFoldMode();\n    this.$behaviour = this.$defaultBehaviour;\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n    this.lineCommentStart = \"--\";\n    this.$id = \"ace/mode/cirru\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}