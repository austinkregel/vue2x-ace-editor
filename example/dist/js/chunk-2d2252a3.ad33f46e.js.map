{"version":3,"sources":["webpack:///./node_modules/brace/mode/jack.js"],"names":["ace","define","acequire","exports","module","oop","TextHighlightRules","JackHighlightRules","this","$rules","start","token","regex","next","string1","string2","inherits","Range","MatchingBraceOutdent","checkOutdent","line","input","test","autoOutdent","doc","row","getLine","match","column","length","openBracePos","findMatchingBracket","indent","$getIndent","replace","call","prototype","BaseFoldMode","FoldMode","commentRegex","foldingStartMarker","RegExp","source","foldingStopMarker","end","singleLineBlockCommentRe","tripleStarBlockCommentRe","startRegionRe","_getFoldWidgetBase","getFoldWidget","session","foldStyle","fw","getFoldWidgetRange","forceMultiline","getCommentRegionBlock","i","index","openingBracketBlock","range","getCommentFoldRange","isMultiLine","getSectionRange","closingBracketBlock","startIndent","search","startRow","startColumn","endRow","maxRow","getLength","subRange","re","depth","m","exec","TextMode","Mode","HighlightRules","CstyleBehaviour","CStyleFoldMode","$outdent","$behaviour","foldingRules","lineCommentStart","getNextLineIndent","state","tab","$id"],"mappings":"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","file":"js/chunk-2d2252a3.ad33f46e.js","sourcesContent":["ace.define(\"ace/mode/jack_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextHighlightRules = acequire(\"./text_highlight_rules\").TextHighlightRules;\n\nvar JackHighlightRules = function() {\n    this.$rules = {\n        \"start\" : [\n            {\n                token : \"string\",\n                regex : '\"',\n                next  : \"string2\"\n            }, {\n                token : \"string\",\n                regex : \"'\",\n                next  : \"string1\"\n            }, {\n                token : \"constant.numeric\", // hex\n                regex: \"-?0[xX][0-9a-fA-F]+\\\\b\"\n            }, {\n                token : \"constant.numeric\", // float\n                regex : \"(?:0|[-+]?[1-9][0-9]*)\\\\b\"\n            }, {\n                token : \"constant.binary\",\n                regex : \"<[0-9A-Fa-f][0-9A-Fa-f](\\\\s+[0-9A-Fa-f][0-9A-Fa-f])*>\"\n            }, {\n                token : \"constant.language.boolean\",\n                regex : \"(?:true|false)\\\\b\"\n            }, {\n                token : \"constant.language.null\",\n                regex : \"null\\\\b\"\n            }, {\n                token : \"storage.type\",\n                regex: \"(?:Integer|Boolean|Null|String|Buffer|Tuple|List|Object|Function|Coroutine|Form)\\\\b\"\n            }, {\n                token : \"keyword\",\n                regex : \"(?:return|abort|vars|for|delete|in|is|escape|exec|split|and|if|elif|else|while)\\\\b\"\n            }, {\n                token : \"language.builtin\",\n                regex : \"(?:lines|source|parse|read-stream|interval|substr|parseint|write|print|range|rand|inspect|bind|i-values|i-pairs|i-map|i-filter|i-chunk|i-all\\\\?|i-any\\\\?|i-collect|i-zip|i-merge|i-each)\\\\b\"\n            }, {\n                token : \"comment\",\n                regex : \"--.*$\"\n            }, {\n                token : \"paren.lparen\",\n                regex : \"[[({]\"\n            }, {\n                token : \"paren.rparen\",\n                regex : \"[\\\\])}]\"\n            }, {\n                token : \"storage.form\",\n                regex : \"@[a-z]+\"\n            }, {\n                token : \"constant.other.symbol\",\n                regex : ':+[a-zA-Z_]([-]?[a-zA-Z0-9_])*[?!]?'\n            }, {\n                token : \"variable\",\n                regex : '[a-zA-Z_]([-]?[a-zA-Z0-9_])*[?!]?'\n            }, {\n                token : \"keyword.operator\",\n                regex : \"\\\\|\\\\||\\\\^\\\\^|&&|!=|==|<=|<|>=|>|\\\\+|-|\\\\*|\\\\/|\\\\^|\\\\%|\\\\#|\\\\!\"\n            }, {\n                token : \"text\",\n                regex : \"\\\\s+\"\n            }\n        ],\n        \"string1\" : [\n            {\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|['\"\\\\\\/bfnrt])/\n            }, {\n                token : \"string\",\n                regex : \"[^'\\\\\\\\]+\"\n            }, {\n                token : \"string\",\n                regex : \"'\",\n                next  : \"start\"\n            }, {\n                token : \"string\",\n                regex : \"\",\n                next  : \"start\"\n            }\n        ],\n        \"string2\" : [\n            {\n                token : \"constant.language.escape\",\n                regex : /\\\\(?:x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|['\"\\\\\\/bfnrt])/\n            }, {\n                token : \"string\",\n                regex : '[^\"\\\\\\\\]+'\n            }, {\n                token : \"string\",\n                regex : '\"',\n                next  : \"start\"\n            }, {\n                token : \"string\",\n                regex : \"\",\n                next  : \"start\"\n            }\n        ]\n    };\n    \n};\n\noop.inherits(JackHighlightRules, TextHighlightRules);\n\nexports.JackHighlightRules = JackHighlightRules;\n});\n\nace.define(\"ace/mode/matching_brace_outdent\",[\"require\",\"exports\",\"module\",\"ace/range\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar Range = acequire(\"../range\").Range;\n\nvar MatchingBraceOutdent = function() {};\n\n(function() {\n\n    this.checkOutdent = function(line, input) {\n        if (! /^\\s+$/.test(line))\n            return false;\n\n        return /^\\s*\\}/.test(input);\n    };\n\n    this.autoOutdent = function(doc, row) {\n        var line = doc.getLine(row);\n        var match = line.match(/^(\\s*\\})/);\n\n        if (!match) return 0;\n\n        var column = match[1].length;\n        var openBracePos = doc.findMatchingBracket({row: row, column: column});\n\n        if (!openBracePos || openBracePos.row == row) return 0;\n\n        var indent = this.$getIndent(doc.getLine(openBracePos.row));\n        doc.replace(new Range(row, 0, row, column-1), indent);\n    };\n\n    this.$getIndent = function(line) {\n        return line.match(/^\\s*/)[0];\n    };\n\n}).call(MatchingBraceOutdent.prototype);\n\nexports.MatchingBraceOutdent = MatchingBraceOutdent;\n});\n\nace.define(\"ace/mode/folding/cstyle\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/range\",\"ace/mode/folding/fold_mode\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../../lib/oop\");\nvar Range = acequire(\"../../range\").Range;\nvar BaseFoldMode = acequire(\"./fold_mode\").FoldMode;\n\nvar FoldMode = exports.FoldMode = function(commentRegex) {\n    if (commentRegex) {\n        this.foldingStartMarker = new RegExp(\n            this.foldingStartMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.start)\n        );\n        this.foldingStopMarker = new RegExp(\n            this.foldingStopMarker.source.replace(/\\|[^|]*?$/, \"|\" + commentRegex.end)\n        );\n    }\n};\noop.inherits(FoldMode, BaseFoldMode);\n\n(function() {\n    \n    this.foldingStartMarker = /([\\{\\[\\(])[^\\}\\]\\)]*$|^\\s*(\\/\\*)/;\n    this.foldingStopMarker = /^[^\\[\\{\\(]*([\\}\\]\\)])|^[\\s\\*]*(\\*\\/)/;\n    this.singleLineBlockCommentRe= /^\\s*(\\/\\*).*\\*\\/\\s*$/;\n    this.tripleStarBlockCommentRe = /^\\s*(\\/\\*\\*\\*).*\\*\\/\\s*$/;\n    this.startRegionRe = /^\\s*(\\/\\*|\\/\\/)#?region\\b/;\n    this._getFoldWidgetBase = this.getFoldWidget;\n    this.getFoldWidget = function(session, foldStyle, row) {\n        var line = session.getLine(row);\n    \n        if (this.singleLineBlockCommentRe.test(line)) {\n            if (!this.startRegionRe.test(line) && !this.tripleStarBlockCommentRe.test(line))\n                return \"\";\n        }\n    \n        var fw = this._getFoldWidgetBase(session, foldStyle, row);\n    \n        if (!fw && this.startRegionRe.test(line))\n            return \"start\"; // lineCommentRegionStart\n    \n        return fw;\n    };\n\n    this.getFoldWidgetRange = function(session, foldStyle, row, forceMultiline) {\n        var line = session.getLine(row);\n        \n        if (this.startRegionRe.test(line))\n            return this.getCommentRegionBlock(session, line, row);\n        \n        var match = line.match(this.foldingStartMarker);\n        if (match) {\n            var i = match.index;\n\n            if (match[1])\n                return this.openingBracketBlock(session, match[1], row, i);\n                \n            var range = session.getCommentFoldRange(row, i + match[0].length, 1);\n            \n            if (range && !range.isMultiLine()) {\n                if (forceMultiline) {\n                    range = this.getSectionRange(session, row);\n                } else if (foldStyle != \"all\")\n                    range = null;\n            }\n            \n            return range;\n        }\n\n        if (foldStyle === \"markbegin\")\n            return;\n\n        var match = line.match(this.foldingStopMarker);\n        if (match) {\n            var i = match.index + match[0].length;\n\n            if (match[1])\n                return this.closingBracketBlock(session, match[1], row, i);\n\n            return session.getCommentFoldRange(row, i, -1);\n        }\n    };\n    \n    this.getSectionRange = function(session, row) {\n        var line = session.getLine(row);\n        var startIndent = line.search(/\\S/);\n        var startRow = row;\n        var startColumn = line.length;\n        row = row + 1;\n        var endRow = row;\n        var maxRow = session.getLength();\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var indent = line.search(/\\S/);\n            if (indent === -1)\n                continue;\n            if  (startIndent > indent)\n                break;\n            var subRange = this.getFoldWidgetRange(session, \"all\", row);\n            \n            if (subRange) {\n                if (subRange.start.row <= startRow) {\n                    break;\n                } else if (subRange.isMultiLine()) {\n                    row = subRange.end.row;\n                } else if (startIndent == indent) {\n                    break;\n                }\n            }\n            endRow = row;\n        }\n        \n        return new Range(startRow, startColumn, endRow, session.getLine(endRow).length);\n    };\n    this.getCommentRegionBlock = function(session, line, row) {\n        var startColumn = line.search(/\\s*$/);\n        var maxRow = session.getLength();\n        var startRow = row;\n        \n        var re = /^\\s*(?:\\/\\*|\\/\\/|--)#?(end)?region\\b/;\n        var depth = 1;\n        while (++row < maxRow) {\n            line = session.getLine(row);\n            var m = re.exec(line);\n            if (!m) continue;\n            if (m[1]) depth--;\n            else depth++;\n\n            if (!depth) break;\n        }\n\n        var endRow = row;\n        if (endRow > startRow) {\n            return new Range(startRow, startColumn, endRow, line.length);\n        }\n    };\n\n}).call(FoldMode.prototype);\n\n});\n\nace.define(\"ace/mode/jack\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/jack_highlight_rules\",\"ace/mode/matching_brace_outdent\",\"ace/mode/behaviour/cstyle\",\"ace/mode/folding/cstyle\"], function(acequire, exports, module) {\n\"use strict\";\n\nvar oop = acequire(\"../lib/oop\");\nvar TextMode = acequire(\"./text\").Mode;\nvar HighlightRules = acequire(\"./jack_highlight_rules\").JackHighlightRules;\nvar MatchingBraceOutdent = acequire(\"./matching_brace_outdent\").MatchingBraceOutdent;\nvar CstyleBehaviour = acequire(\"./behaviour/cstyle\").CstyleBehaviour;\nvar CStyleFoldMode = acequire(\"./folding/cstyle\").FoldMode;\n\nvar Mode = function() {\n    this.HighlightRules = HighlightRules;\n    this.$outdent = new MatchingBraceOutdent();\n    this.$behaviour = new CstyleBehaviour();\n    this.foldingRules = new CStyleFoldMode();\n};\noop.inherits(Mode, TextMode);\n\n(function() {\n\n    this.lineCommentStart = \"--\";\n\n    this.getNextLineIndent = function(state, line, tab) {\n        var indent = this.$getIndent(line);\n\n        if (state == \"start\") {\n            var match = line.match(/^.*[\\{\\(\\[]\\s*$/);\n            if (match) {\n                indent += tab;\n            }\n        }\n\n        return indent;\n    };\n\n    this.checkOutdent = function(state, line, input) {\n        return this.$outdent.checkOutdent(line, input);\n    };\n\n    this.autoOutdent = function(state, doc, row) {\n        this.$outdent.autoOutdent(doc, row);\n    };\n\n\n    this.$id = \"ace/mode/jack\";\n}).call(Mode.prototype);\n\nexports.Mode = Mode;\n});\n"],"sourceRoot":""}